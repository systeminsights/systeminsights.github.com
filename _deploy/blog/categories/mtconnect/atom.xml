<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mtconnect | Manufacturing Big Data]]></title>
  <link href="http://www.manufacturingbigdata.com/blog/categories/mtconnect/atom.xml" rel="self"/>
  <link href="http://www.manufacturingbigdata.com/"/>
  <updated>2013-08-20T09:56:21+05:30</updated>
  <id>http://www.manufacturingbigdata.com/</id>
  <author>
    <name><![CDATA[System Insights]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Next Generation of American Manufacturing]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2013/06/24/the-next-generation-of-american-manufacturing/"/>
    <updated>2013-06-24T11:53:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2013/06/24/the-next-generation-of-american-manufacturing</id>
    <content type="html"><![CDATA[<p>Steve Fritzinger, NetApp&rsquo;s Virtualization Alliance Manager, Java
Author and Economics Writer, discusses the future of American
manufacturing with Penny Brown from IMTS TV. America is by no means a
laggard in the world of manufacturing; we are very competitive and
with a proper educational foundation and technology, we can retain our
position and exceed our current standing. But in order to do so,
American manufacturing must adapt to survive.</p>

<p>div=. <iframe width="560" height="315" src="http://www.youtube.com/embed/c1qtzgr9KN0?rel=0" frameborder="0" allowfullscreen></iframe></p>

<p>At the heart of this revolution is technology. The new manufacturing
jobs will be more technical and require increasingly skilled
labor. The machines and technology will do the simple tasks, leaving
our labor force to focus on performance, new processes, and
materials. Standards and standards based solutions will enable this
revolution because manufactures will have the ability to leverage a
wider choice of solutions that specifically address their needs.</p>

<p>Unlike the current situation, each product shares a common
infrastructure with no additional per-product cost for
connectivity. As well, this reduces the barrier of entry for new
products and services, so there are more options and faster
deployment. In the end the market grows as the demand increase,
creating a larger aggregate for everyone.</p>

<p>Our product, vimana, exclusively uses standard based data collection to
drive our analytics platform. We believe that promoting the industry
and developing standards will increase the understanding of what is
possible and in the end will push the boundaries of the industry. If
the industry is more advanced, then our solutions will be able to
leverage an informed market that is asking for ways to improve and
compete effectively, regardless of where they&rsquo;re located.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MTConnect Releases a new Video from MC[2]]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2013/06/13/mtconnect-releases-a-new-video-from-mc-2/"/>
    <updated>2013-06-13T14:35:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2013/06/13/mtconnect-releases-a-new-video-from-mc-2</id>
    <content type="html"><![CDATA[<p>Excellent video from MC ^2^ conference staring Jake Ervin. This was
shot at the MC ^2^ conference in April and Jake, sadly, trying to strike up
a meaningful conversation with a machine tool. I make a cameo at the
end of the video. After watching myself, I&rsquo;ve lost all aspirations of
acting. Better stick to my day job!</p>

<p>div=. <iframe width="640" height="400" src="http://www.youtube.com/embed/aBl0QHAPurs?rel=0" frameborder="0" allowfullscreen></iframe></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MTConnect ROS-I Robot CNC Integration]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2013/06/07/mtconnect-ros-i-robot-cnc-integration/"/>
    <updated>2013-06-07T23:38:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2013/06/07/mtconnect-ros-i-robot-cnc-integration</id>
    <content type="html"><![CDATA[<p>
  <style type="text/css"></p>

<pre><code>ol { margin-left: 2.5em; }
article blockquote { font-size: 1em; }
</code></pre>

<p>  </style>
</p>

<p>h2. Robotic Interface – Machine Tool Perspective</p>

<p>bq. This work was conducted under Grant Opportunity Number
2012-NIST-MSE-01 for the Intelligent System Division of the National
Institute of Standards and Technology (&ldquo;NIST&rdquo;:<a href="http://www.nist.gov">http://www.nist.gov</a>)
with the collaboration of &ldquo;System Insights&rdquo;:<a href="http://www.systeminsights.com,">http://www.systeminsights.com,</a>
&ldquo;SwRI&rdquo;:<a href="http://www.swri.org">http://www.swri.org</a> (Southwest Research
Institute), &ldquo;NCDMM&rdquo;:<a href="http://ncdmm.org">http://ncdmm.org</a> (National Center for Defense
Manufacturing and Machining), &ldquo;AMT&rdquo;:<a href="http://amtonline.org">http://amtonline.org</a> (Association
for Manufacturing Technology) and &ldquo;Mazak USA&rdquo;:<a href="http://www.mazakusa.com">http://www.mazakusa.com</a>
for help with connectivity of the machine tool used in the
demonstration.</p>

<p>div=. <iframe width="640" height="480" src="http://www.youtube.com/embed/JHzcgyi2DsQ" frameborder="0" allowfullscreen></iframe></p>

<ol type="a">
<li><br/></li>
</ol>


<p>From the machine tool perspective, the Robot is an external entity
that loads and unloads material into and from its work-holding. This
function can be carried out by a person, a robot, a mobile material
handler, an operator, or a highly trained golden retriever. The
machine does not care how the material is supplied, just that the task
has been completed so it can start its cutting cycle.</p>

<p>The innovation in the MTConnect interface is the ability to abstract
the task being performed from the underlying implementation necessary
to complete the task. To load material into a machine tool, the robot
has to have knowledge of the location of the work-holding and the
necessary approach angles as well as any collision domains within the
machine enclosure. From the machine tools perspective, this is all
inconsequential as long as it gets its material.</p>

<p>Once complete, the machine tool needs to be able to ask for the
material to be removed. This is also accomplished at the higher level
by requesting the material get unloaded. At that point, the machine
tool does not care where the material is going; it only needs to
request another piece of material for subsequent processing. It is up
to the Robot sequence the material to the next station.</p>

<p>From the Robot&rsquo;s perspective, it knows how to pick up a new piece of
material and place it in the machine tool and where to place the
material once it has removed it. It has two needs that need to be
fulfilled from the machine tool, opening and closing the door and
opening and closing the chuck.</p>

<p>h4. The “interfaces” provided by each device is as follows:</p>

<div style="margin-left:2em;">

*Machine Tool Requests:*
# LoadMaterial
# UnloadMaterial

*Robot Requests:*
# OpenDoor
# CloseDoor
# OpenCluck
# CloseChuck

</div>


<p>The rational for having the Robot make the requests of the machine
tool is the reduction of failure due to timing related issues. When
the machine tool has requested the material load and unload, it
has no way to sense the location of the robot and the presence of
material in the chuck. When the Robot begins its cycle it checks the
current door state, if the door is closed, it will request the machine
tool open the door. It may also ask the machine tool to open the chuck
at the same time. The machine tool will respond with an Active →
Complete sequence stating that it has completed the task or it will
Fail if it is incapable.</p>

<p>The Robot requires the machine to be have the door and the chuck must
be open before it can insert material. Once the material is in place,
the Robot asks the machine tool to close the chuck. It must not
release the material until the chuck is closed or else it will be
dropped. The machine tool will track the state of the chuck and a
positive engagement before it changes the chuck state and signals the
task as complete.</p>

<p>The same goes for the door; the machine tool has no knowledge of the
position of the Robot and therefore does not know when the Robot is
safely outside the enclosure. The Robot therefor asks for the door to
be closed once it knows there are no issues. This decouples the issue
of load completion timing with the door actuation.</p>

<p>Messaging at this higher semantic level provides the basis for a
lighter weight protocol that has simplified failure recovery scenarios
and less coupling of inter-related components. Decoupling of
components allows us to more readily replace parts of the system, like
replace the Robot or the machine tool with another device that can
perform the required activity and have the interface layer stay the
same.</p>

<p>h3. Machine Tool Architecture Overview</p>

<p>The MTConnect CNC architecture consists of three components – the
MTConnect adapter for the machine tool to report states, the MTConnect
agent to provide MTConnect protocol and XML formatting, and the
Interface Control Layer (ICL) that listens to other devices and
coordinates the activities. The adapter and agent are the standard
out-of-the box MTConnect components for the machine tool. Minor
additions were made to the adapter to support chuck state for use in
this project. That addition will be proposed to the MTConnect standard
in future versions (more on that later.)</p>

<p>p=. !/images/2013-06-07-figure1.png(Figure 1)!</p>

<p>p=. <em>Figure 1</em></p>

<p>The ICL layer is a client of both the CNC agent and the Robot agent
and publishes only the state of the interface data items. This allows
us to relegate the machine status to the machine tool and separate out
the responsibility to react to the changes in the state of both robot
and CNC to the ICL layer. This layer also instructs the machine tool
to do one of the following six operations:</p>

<h1>Open Door</h1>

<h1>Close Door</h1>

<h1>Open Chuck</h1>

<h1>Close Chuck</h1>

<h1>Start Cycle</h1>

<h1>Reset/Stop Cycle</h1>

<p>These actions are invoked on the machine tool controller by sending
the instructions that resolve into the PLC or API specific
operations. For the demonstration at NIST, this was accomplished by
invoking a small utility on the controller the set various PLC
registers to actuate the chuck, cycle start and reset. We could not
open and close the door because the machine was not equipped with an
actuator; to do so would have incurred a large additional cost. The door
behavior was therefore synthesized for the demonstration.</p>

<p>h3. Messaging Architecture</p>

<p>p=. !/images/2013-06-07-figure2.png(Figure 2)!</p>

<p>p=. <em>Figure 2</em></p>

<p>MTConnect uses a very simple messaging architecture based on the
MTConnect read-only philosophy. Instead of sending a message
requesting an action be performed or setting a variable on a remote
device, MTConnect has each device announce its needs to any
application or device monitoring its state. In effect,   the request
interface is a simple state machine that goes from @NOT_READY@ to
@READY@. And when the interface would like the activity performed, it
transitions to Active.</p>

<p>In turn, it waits for the device performing the activity, the
responder, to announce it is actively performing the activity and then
to change to the complete state when its done. This provides the basis
for the coordination of actions between devices. Currently this scheme
has been tested between two devices paired directly. In the future
enhancements section of this report, we will discuss some ideas to
extend this paradigm to multiple interconnected devices supporting
cells or even swarms of devices in a mobile environment.</p>

<p>Figure 1 shows the state transitions and intermediate as well as
terminal states. This model is currently implemented using an
MTConnect Event with the subType of @REQUEST@ or @RESPONSE@ to
indicate its behavior. In the next section we will have a more
in-depth discussion of the failure scenarios and how recovery is to be
handled. The MTConnect machine tool simulator and state machine
implements many of these scenarios and references to the actual
implementation will be provided.</p>

<p>p=. !/images/2013-06-07-figure3.png(Figure 3)!</p>

<p>p=. <em>Figure 3</em></p>

<p>In the MTConnect standard, the current state of a device can be
determined by making an HTTP request and specifying the device name
and current, for example: @<a href="http://localhost:5000/cnc/current@">http://localhost:5000/cnc/current@</a> will
provide the current state of the “cnc” device on the local
machine. The result will come back to the client or requestor in XML
which they can then parse to find the information they need. From that
point on, near-real-time data can be received on a push basis (meaning
there is no need to poll) using the MTConnect streaming capability
using the sample request. To get a completely contiguous data set, one
uses the @nextSequence@ number presented in the current to begin the
push based request as follows:</p>

<pre>
http://localhost:5000/cnc/sample?from=100231&interval=0
</pre>


<p>This will provide data immediately after it arrives (usually within
3ms) to the client. The interval=0 means never delay and wait for
additional data to arrive before sending out the updates. It is
usually best accompanied by a filter to make sure we don’t load the
communications or the processes unnecessarily. This can be done by
providing a path as an argument.</p>

<pre>
http://localhost:5000/cnc/sample?from=100231&interval=0&path=//DataItem[@type="CONTROLLER_MODE"or@type="EXECUTION"or@type="CHUCK_STATE"or@type="AVAILABILITY"or\@category="CONDITION”]|//Interfaces
</pre>


<p>The example will give us only the controller mode, chuck state,
execution, conditions, as well as all the information from the
interfaces. This is the full set of data required by the Robot to
operate.</p>

<p>For the purposes of this discussion, we will focus on the interfaces
and a few key Computer Numerically Controlled Machine Tool (referred
to as CNC) and Robot states that are required for coordination of
interaction. The following is based on the implementation of
interfaces for the ROS/I MTConnect demonstration. For more information
on streaming data handling and event processing, please consult Part 1
of the MTConnect standard.</p>

<p>h3. State Machines</p>

<p>h4. The implementation of the machine tool ICL consists of 7 state machines, they are as follows:</p>

<h1>Top level machine tool</h1>

<h1>Material load</h1>

<h1>Material unload</h1>

<h1>Open chuck</h1>

<h1>Close chuck</h1>

<h1>Open door</h1>

<h1>Close door</h1>

<p>The top level state machine controls the main operational and
non-operation states of the machine tool. There are two top-level
states the machine can be in, disabled and operational. In the
disabled state there are two sub-states, &ldquo;not-ready&rdquo; and &ldquo;fault&rdquo;. When
the machine tool has an alarm active, the state machine is in a
&ldquo;fault&rdquo; state. The other disabled state is &ldquo;not-ready&rdquo; which is when
the machine tool is not in @AUTOMATIC@ controller mode or is not ready
to execute the part program.</p>

<p>The operational states are one of the following: &ldquo;idle&rdquo;,
&ldquo;cycle_start&rdquo;, &ldquo;loading&rdquo;, or &ldquo;unloading&rdquo;. The machine tool becomes
operational when the machine tool’s controller mode is in @AUTOMATIC@
and it is ready to run the part program. If the robot is interfaces
are @NOT_READY@, the machine tool will remain in an &ldquo;idle&rdquo; state until
the robot interfaces are @READY@. When the robot interfaces are
@READY@, the machine tool will transition into the &ldquo;loading&rdquo; or
&ldquo;unloading&rdquo; states depending on whether the machine has material.</p>

<p>Once the machine completes the material load, it will transition into
a cycle start state. The cycle start state will transition once the
cycle is complete indicated by the execution transitioning from active
to ready. The machine will then go into an unloading state signaling
the robot to remove the material.</p>

<p>p=. !/images/2013-06-07-figure4.png(Figure 4)!</p>

<p>p=. <em>Figure 4</em></p>

<p>The other 6 state machines represent two interface types, request and
response. We have two requests (load and unload) and four responses
(open/close chuck and door). For this discussion we will be presenting
only one representation of each, the open door and the material load.</p>

<p>The response state machine consists of a single level where the states
are equivalent to the MTConnect interface proposal. The states are
not_read, ready, active, complete, and fail. The feedback from the
machine tool’s state variable (DoorState in this instance) will
trigger the transitions from active to complete. Since we did not have
a real door actuator, this was simulated by a timer. The chuck state
did operate off of the machine tool chuck’s solenoids.</p>

<p>The door interface values will track the states in this state machine
and are modified directly in this module. The rest of the states and
transitions are managed externally by the top level state machine or
the machine tool itself. One additional feature of this state machine
is it will coordinate with its inverse operation and validate they are
not both active at the same time. So, in the case of the open door
interface, the close door interface will fail if the open door is
currently active. The door cannot be opening and closing at the same
time.</p>

<p>Most of the complexity in the response state machine is handling of
failures. If anything goes wrong on the robot or machine tool side, we
immediately fail. The failure signal is used to indicate a fault has
occurred and transitions into a fail state. In both the request and
the response, a fail transition will transition the top level state
machine into a failure if the operation is active. More discussion
will be provided in the Failure and recovery section of this document.</p>

<p>p=. !/images/2013-06-07-figure5.png(Figure 5)!</p>

<p>p=. <em>Figure 5</em></p>

<p>The second class of state machine is the request. The request is in
one of the following states, not-ready, active, processing, fail, and
ready. All states except for processing are direct parallels to the
proposed changes to the MTConnect standard, the processing state
tracks the active state on the Robot and transitions to not ready once
the operation is complete. The reason we transition to not-ready
instead of ready is because once the material has been successfully
loaded, we cannot load again, therefor the interface is now not
available until the machine has been unloaded.</p>

<p>p=. !/images/2013-06-07-figure6.png(Figure 6)!</p>

<p>p=. <em>Figure 6</em></p>

<p>h3. Failure and Recovery</p>

<p>This section will discuss the different operational scenarios of the
machine tools. Since all states and transitions can be derived from
the events that occur from the state changes in robot and the machine
tool, we will present the code used to test the state machine and the
expected behavior. These “tests” will serve as the basis of the
behavioral documentation for the MTConnect interface definition in the
subsequent versions of the standard.</p>

<p>The first set of scenarios will present the positive cases where we
will show the successful operation of the door and the chuck. The
later cases will walk through the steps demonstrating what happens
when a component fails and what the recovery scenario is. All examples
are “runnable”, meaning they have been executed and validated with the
current implementation of the machine tool state machine.</p>

<p>For all the tests, we make sure the devices are in an operation state
before we begin our scenarios. Otherwise the machine tool interfaces
will be non-operational. The initiation sequence of events are as
follows:</p>

<pre>
    Given robot Availability is Available
    And robot ControllerMode is Automatic
    And robot Execution is Active
    And robot MaterialLoad is Ready
    And robot MaterialUnload is Ready
    And robot OpenDoor is Ready
    And robot CloseDoor is Ready
    And robot OpenChuck is Ready
    And robot CloseChuck is Ready
    And cnc ControllerMode is Automatic
    Then cnc MaterialLoad should be Active
    And cnc MaterialUnload should be Not_Ready
</pre>


<p>The machine tool is now in an operational state waiting to have
material loaded. This is asserted using the following expression and
will precede all scenarios.</p>

<pre>
  Background: Machine Tool and Robot are operational
    Given Devices are in initial state
</pre>


<p>Actuation of the door and chuck are operationally separate for the
loading and unloading of material. When the machine is in cycle the
door may not open as well as the chuck being locked. But at other
times the robot is free to request the machine tool open and close the
chuck and door to fulfill its needs. The following scenarios test
these functions.</p>

<pre>
  Scenario: Robot asks Cnc to Open Door
    Given cnc MaterialLoad should be Active
    When robot OpenDoor becomes Active
    Then cnc DoorState should be Open

  Scenario: Robot asks Cnc to Open Chuck
    Given cnc MaterialLoad should be Active
    When robot OpenChuck becomes Active
    Then cnc OpenChuck should be Active
    When cnc ChuckState becomes Unlatched
    When cnc ChuckState becomes Open
    Then cnc ChuckState should be Open
</pre>


<p>The following is the full scenario of a material load with chuck and
door operations. Once the robot completes the material load, we
validate that the machine tool starts the cycle.</p>

<pre>
  Scenario: Cnc asks Robot to Load Material
    Given cnc MaterialLoad should be Active
    When robot MaterialLoad becomes Active
</pre>


<p>The following code statement validates the state of a given state
machine.</p>

<pre>
    Then material load state should be processing
</pre>


<p>The following steps open the door and make sure we’re still in a
loading state.</p>

<pre>
    And cnc DoorState should be Open
    And cnc ChuckState becomes Open
    And cnc ChuckState should be Open
    Then machine state should be loading
</pre>


<p>Now the chuck is closed and all states are confirmed</p>

<pre>
    When robot CloseChuck becomes Active
    Then cnc CloseChuck should be Active
    And cnc ChuckState becomes Closed
    And cnc CloseChuck should be Complete
    And robot CloseChuck becomes Ready
    And cnc CloseChuck should be Ready
</pre>


<p>After the chuck is closed and the robot has retracted a safe distance,
the robot requests the machine tool close the door</p>

<pre>
    When robot CloseDoor becomes Active
    Then cnc CloseDoor should be Active
    Then after 1.2 seconds cnc CloseDoor should be Complete
    And cnc DoorState should be Closed
</pre>


<p>The completes the material load and the machine tool cycle
starts. Material load becomes not ready indicating the robot cannot
load more material. The robot is still ready to load if asked to do
so.</p>

<pre>
    When robot MaterialLoad becomes Complete
    And robot MaterialLoad becomes Ready
    Then machine state should be cycle_start
    And cnc MaterialLoad should be Not_Ready
    And robot MaterialLoad becomes Ready
</pre>


<p>h4. Failure Scheario 1:</p>

<pre>
  Scenario: Cnc fails to start cycle
    Given robot MaterialLoad becomes Active
</pre>


<p>The following statement causes the execution data item to fail once it
attempt to change.</p>

<pre>
    And simulate fail exec
</pre>


<p>This section creates the correct state of all the data items and then
takes it through a single set of operations</p>

<pre>
    And Chuck is closed
    And Door is closed
    And robot MaterialLoad becomes Complete
    And robot MaterialLoad becomes Ready
    And cnc MaterialLoad should be Not_Ready
</pre>


<p>Make sure we are in the correct fault state when the load completes</p>

<pre>
    And machine state should be fault
</pre>


<p>h4. Failure scenario 2:</p>

<p>The second failure scenario we will discuss is a failure to load a
piece of material. This results in the machine tool entering into an
idle state after acknowledging the failure of the material load. The
scenario assert at the bottom that the machine state should be idle
since the machine is ready to run, but the robot is not operational.</p>

<p>The final steps are the robot clearing the fault and becoming ready
again. The machine tool enters re-enters the loading state since the
material never arrived successfully. The material unload operation
work in much the same way with the same recovery pattern.</p>

<pre>
  Scenario: Robot can't load material
    Given cnc MaterialLoad should be Active
    And robot MaterialLoad becomes Active
    And Chuck is closed
    And Door is closed

    When robot MaterialLoad becomes Fail
    Then cnc MaterialLoad should be Fail
    And material load state should be fail

    When robot MaterialLoad becomes Not_Ready
    And robot faults ACTUATOR with "Flame"
    And machine state should be idle

    When robot clears ACTUATOR
    And robot MaterialLoad becomes Ready
    And machine state should be loading
</pre>


<p>There are numerous additional scenarios that have been written for
validation of the project. They can be found at: &ldquo;<a href="https://github.com/.../simulator/features">https://github.com/.../simulator/features</a>&rdquo;:<a href="https://github.com/mtconnect/ros_bridge/tree/nist/simulator/features">https://github.com/mtconnect/ros_bridge/tree/nist/simulator/features</a></p>

<p>h3. Enhancements to the MTConnect Standard</p>

<p>To implement a basic Robot to machine tool interface where we have one
Robot loading one Machine Tool, the possible additions to the MTConnect
standard are pretty minimal. The following data items were required on
the machine tool side to represent the states of all components and
the necessary interface events.</p>

<h1>@ChuckState@ was added to the primary @Rotary@ axis “C” with the values of @OPEN@, @CLOSED@, @UNLATCHED@ and @UNAVAILABLE@.</h1>

<h1>A top level device Interfaces component was added to hold all the interfaces.</h1>

<h1>A @MaterialLoader@ component was added as a child of the Interfaces component with the following data items:</h1>

<h2>@MATERIAL_LOAD@ with subtype @REQUEST@.</h2>

<h2>@MATERIAL_UNLOAD@ with subtype @REQUEST@.</h2>

<h2>@LINK_STATE@ that indicates if the interface is active with values @ACTIVE@ , @INACTIVE@, or @UNAVAILABLE@.</h2>

<h1>A @ChuckInterface@ component was added as a child of the Interfaces component with the following data items:</h1>

<h2>@OPEN_CHUCK@ with subtype of @RESPONSE@.</h2>

<h2>@CLOSE_CHUCK@ with subtype of @RESPONSE@.</h2>

<h1>A @DoorInterface@ component was added as a child of the Interfaces component with the following data items:</h1>

<h2>@OPEN_DOOR@ with subtype of @RESPONSE@.</h2>

<h2>@CLOSE_CLOSE@ with subtype of @RESPONSE@.</h2>

<p>The remainder of the machine tool components and data items are the
standard composition of any standard Mazak implementation. The entire
Devices.xml file is provided below. The sections in bold are the areas
we have used to drive the state machine, the sections in bold italic
are new to the standard.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Devices.xml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="ni">&amp;lt;</span>?xml version=<span class="ni">&amp;lsquo;</span>1.0<span class="ni">&amp;rsquo;</span> encoding=<span class="ni">&amp;lsquo;</span>UTF-8<span class="ni">&amp;rsquo;</span>?&gt;
</span><span class='line'>  <span class="nt">&lt;MTConnectDevices</span> <span class="na">xmlns:mt=</span><span class="s">&#39;urn:mtconnect.org:MTConnectDevices:1.2&#39;</span> <span class="na">xmlns:xsi=</span><span class="s">&#39;http://www.w3.org/2001/XMLSchema-instance&#39;</span> <span class="na">xmlns=</span><span class="s">&#39;urn:mtconnect.org:MTConnectDevices:1.2&#39;</span> <span class="na">xsi:schemaLocation=</span><span class="s">&#39;urn:mtconnect.org:MTConnectDevices:1.2 http://www.mtconnect.org/schemas/MTConnectDevices_1.2.xsd&#39;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>Header creationTime=&#39;2013-04-22T15:24:26Z&#39; assetBufferSize=&#39;1024&#39; sender=&#39;localhost&#39; assetCount=&#39;0&#39; version=&#39;1.2&#39; instanceId=&#39;0&#39; bufferSize=&#39;131072&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>Devices<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>Device name=&#39;cnc&#39; uuid=&#39;cnc&#39; id=&#39;cnc_1&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>Description model=&#39;QTN&#39; manufacturer=&#39;Mazak&#39;<span class="ni">&amp;gt;</span>Mazak Quickturn - Mazak Quickturn for ROS/MTConnect<span class="ni">&amp;lt;</span>/Description<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>DataItem type=&#39;AVAILABILITY&#39; category=&#39;EVENT&#39; id=&#39;dtop_2&#39; name=&#39;avail&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>Components<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>Axes name=&#39;base&#39; id=&#39;base_3&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>DataItem type=&#39;ACTUATOR&#39; category=&#39;CONDITION&#39; id=&#39;base_4&#39; name=&#39;servo_cond&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>Components<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>Linear name=&#39;X&#39; id=&#39;X_5&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;POSITION&#39; category=&#39;SAMPLE&#39; id=&#39;X_6&#39; name=&#39;Xabs&#39; subType=&#39;ACTUAL&#39; units=&#39;MILLIMETER&#39; nativeUnits=&#39;INCH&#39; coordinateSystem=&#39;MACHINE&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;POSITION&#39; category=&#39;CONDITION&#39; id=&#39;X_7&#39; name=&#39;Xtravel&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;LOAD&#39; category=&#39;SAMPLE&#39; id=&#39;X_8&#39; name=&#39;Xload&#39; units=&#39;PERCENT&#39; nativeUnits=&#39;PERCENT&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;AXIS_FEEDRATE&#39; category=&#39;SAMPLE&#39; id=&#39;X_9&#39; name=&#39;Xfrt&#39; units=&#39;MILLIMETER/SECOND&#39; nativeUnits=&#39;FOOT/MINUTE&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>/Linear<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>Linear name=&#39;Z&#39; id=&#39;Z_10&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;POSITION&#39; category=&#39;SAMPLE&#39; id=&#39;Z_11&#39; name=&#39;Zabs&#39; subType=&#39;ACTUAL&#39; units=&#39;MILLIMETER&#39; nativeUnits=&#39;INCH&#39; coordinateSystem=&#39;MACHINE&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;POSITION&#39; category=&#39;CONDITION&#39; id=&#39;Z_12&#39; name=&#39;Ztravel&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;LOAD&#39; category=&#39;SAMPLE&#39; id=&#39;Z_13&#39; name=&#39;Zload&#39; units=&#39;PERCENT&#39; nativeUnits=&#39;PERCENT&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;AXIS_FEEDRATE&#39; category=&#39;SAMPLE&#39; id=&#39;Z_14&#39; name=&#39;Zfrt&#39; units=&#39;MILLIMETER/SECOND&#39; nativeUnits=&#39;FOOT/MINUTE&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>/Linear<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>Rotary name=&#39;C&#39; id=&#39;C_15&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>!-- Rotary Part --<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;LOAD&#39; category=&#39;SAMPLE&#39; id=&#39;C_16&#39; name=&#39;Cload&#39; units=&#39;PERCENT&#39; nativeUnits=&#39;PERCENT&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;ANGULAR_VELOCITY&#39; category=&#39;SAMPLE&#39; id=&#39;C_17&#39; name=&#39;Cfrt&#39; units=&#39;DEGREE/SECOND&#39; nativeUnits=&#39;DEGREE/MINUTE&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;ANGLE&#39; category=&#39;SAMPLE&#39; id=&#39;C_18&#39; name=&#39;Cdeg&#39; subType=&#39;ACTUAL&#39; units=&#39;DEGREE&#39; nativeUnits=&#39;DEGREE&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;ANGLE&#39; category=&#39;CONDITION&#39; id=&#39;C_19&#39; name=&#39;Ctravel&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>!-- Spindle part --<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;SPINDLE_SPEED&#39; category=&#39;SAMPLE&#39; id=&#39;C_20&#39; name=&#39;Srpm&#39; subType=&#39;ACTUAL&#39; units=&#39;REVOLUTION/MINUTE&#39; nativeUnits=&#39;REVOLUTION/MINUTE&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;LOAD&#39; category=&#39;SAMPLE&#39; id=&#39;C_21&#39; name=&#39;Sload&#39; units=&#39;PERCENT&#39; nativeUnits=&#39;PERCENT&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;TEMPERATURE&#39; category=&#39;SAMPLE&#39; id=&#39;C_22&#39; name=&#39;Stemp&#39; units=&#39;CELSIUS&#39; nativeUnits=&#39;CELSIUS&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;ROTARY_MODE&#39; category=&#39;EVENT&#39; id=&#39;C_23&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>Constraints<span class="ni">&amp;gt;</span>
</span><span class='line'>                  <span class="ni">&amp;lt;</span>Value<span class="ni">&amp;gt;</span>SPINDLE<span class="ni">&amp;lt;</span>/Value<span class="ni">&amp;gt;</span>
</span><span class='line'>                  <span class="ni">&amp;lt;</span>Value<span class="ni">&amp;gt;</span>INDEX<span class="ni">&amp;lt;</span>/Value<span class="ni">&amp;gt;</span>
</span><span class='line'>                  <span class="ni">&amp;lt;</span>Value<span class="ni">&amp;gt;</span>CONTOUR<span class="ni">&amp;lt;</span>/Value<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>/Constraints<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>/DataItem<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;LOAD&#39; category=&#39;CONDITION&#39; id=&#39;C_24&#39; name=&#39;Sload_cond&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;TEMPERATURE&#39; category=&#39;CONDITION&#39; id=&#39;C_25&#39; name=&#39;Stemp_cond&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;CHUCK_STATE&#39; category=&#39;EVENT&#39; id=&#39;C_26&#39; name=&#39;chuck_status&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>/Rotary<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>Rotary name=&#39;C2&#39; nativeName=&#39;S2&#39; id=&#39;C2_27&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;SPINDLE_SPEED&#39; category=&#39;SAMPLE&#39; id=&#39;C2_28&#39; name=&#39;S2rpm&#39; subType=&#39;ACTUAL&#39; units=&#39;REVOLUTION/MINUTE&#39; nativeUnits=&#39;REVOLUTION/MINUTE&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;LOAD&#39; category=&#39;SAMPLE&#39; id=&#39;C2_29&#39; name=&#39;S2load&#39; units=&#39;PERCENT&#39; nativeUnits=&#39;PERCENT&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;TEMPERATURE&#39; category=&#39;SAMPLE&#39; id=&#39;C2_30&#39; name=&#39;S2temp&#39; units=&#39;CELSIUS&#39; nativeUnits=&#39;CELSIUS&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;ROTARY_MODE&#39; category=&#39;EVENT&#39; id=&#39;C2_31&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>Constraints<span class="ni">&amp;gt;</span>
</span><span class='line'>                  <span class="ni">&amp;lt;</span>Value<span class="ni">&amp;gt;</span>SPINDLE<span class="ni">&amp;lt;</span>/Value<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>/Constraints<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>/DataItem<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;LOAD&#39; category=&#39;CONDITION&#39; id=&#39;C2_32&#39; name=&#39;S2load_cond&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;TEMPERATURE&#39; category=&#39;CONDITION&#39; id=&#39;C2_33&#39; name=&#39;S2temp_cond&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>/Rotary<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/Components<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>/Axes<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>Controller name=&#39;controller&#39; id=&#39;controller_34&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>DataItem type=&#39;COMMUNICATIONS&#39; category=&#39;CONDITION&#39; id=&#39;controller_35&#39; name=&#39;comms_cond&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>DataItem type=&#39;LOGIC_PROGRAM&#39; category=&#39;CONDITION&#39; id=&#39;controller_36&#39; name=&#39;logic_cond&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>DataItem type=&#39;SYSTEM&#39; category=&#39;CONDITION&#39; id=&#39;controller_37&#39; name=&#39;system_cond&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>DataItem type=&#39;EMERGENCY_STOP&#39; category=&#39;EVENT&#39; id=&#39;controller_38&#39; name=&#39;estop&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>Components<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>Path name=&#39;path&#39; id=&#39;path_39&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;SPINDLE_SPEED&#39; category=&#39;SAMPLE&#39; id=&#39;path_40&#39; name=&#39;Sovr&#39; subType=&#39;OVERRIDE&#39; units=&#39;PERCENT&#39; nativeUnits=&#39;PERCENT&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;PROGRAM&#39; category=&#39;EVENT&#39; id=&#39;path_41&#39; name=&#39;program&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;PROGRAM&#39; category=&#39;EVENT&#39; id=&#39;path_42&#39; name=&#39;subprogram&#39; subType=&#39;x:SUB&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;LINE&#39; category=&#39;EVENT&#39; id=&#39;path_43&#39; name=&#39;line&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;x:UNIT&#39; category=&#39;EVENT&#39; id=&#39;path_44&#39; name=&#39;unitNum&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;x:SEQUENCE_NUMBER&#39; category=&#39;EVENT&#39; id=&#39;path_45&#39; name=&#39;sequenceNum&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;PART_COUNT&#39; category=&#39;EVENT&#39; id=&#39;path_46&#39; name=&#39;PartCountAct&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;PATH_FEEDRATE&#39; category=&#39;SAMPLE&#39; id=&#39;path_47&#39; name=&#39;Fact&#39; subType=&#39;ACTUAL&#39; units=&#39;MILLIMETER/SECOND&#39; nativeUnits=&#39;FOOT/MINUTE&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;PATH_FEEDRATE&#39; category=&#39;EVENT&#39; id=&#39;path_48&#39; name=&#39;Frapidovr&#39; subType=&#39;OVERRIDE&#39; units=&#39;PERCENT&#39; nativeUnits=&#39;PERCENT&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;PATH_FEEDRATE&#39; category=&#39;EVENT&#39; id=&#39;path_49&#39; name=&#39;Fovr&#39; subType=&#39;OVERRIDE&#39; units=&#39;PERCENT&#39; nativeUnits=&#39;PERCENT&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;TOOL_ID&#39; category=&#39;EVENT&#39; id=&#39;path_50&#39; name=&#39;Tool_number&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;x:TOOL_GROUP&#39; category=&#39;EVENT&#39; id=&#39;path_51&#39; name=&#39;Tool_group&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;x:TOOL_SUFFIX&#39; category=&#39;EVENT&#39; id=&#39;path_52&#39; name=&#39;Tool_suffix&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;EXECUTION&#39; category=&#39;EVENT&#39; id=&#39;path_53&#39; name=&#39;execution&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;CONTROLLER_MODE&#39; category=&#39;EVENT&#39; id=&#39;path_54&#39; name=&#39;mode&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;x:COMMENT&#39; category=&#39;EVENT&#39; id=&#39;path_55&#39; name=&#39;program_cmt&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;x:COMMENT&#39; category=&#39;EVENT&#39; id=&#39;path_56&#39; name=&#39;subprogram_cmt&#39; subType=&#39;x:SUB&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;x:DURATION&#39; category=&#39;EVENT&#39; id=&#39;path_57&#39; name=&#39;auto_time&#39; subType=&#39;x:AUTO&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;x:DURATION&#39; category=&#39;EVENT&#39; id=&#39;path_58&#39; name=&#39;total_time&#39; subType=&#39;x:TOTAL&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;x:DURATION&#39; category=&#39;EVENT&#39; id=&#39;path_59&#39; name=&#39;cut_time&#39; subType=&#39;x:CUT&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;MOTION_PROGRAM&#39; category=&#39;CONDITION&#39; id=&#39;path_60&#39; name=&#39;motion_cond&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;SYSTEM&#39; category=&#39;CONDITION&#39; id=&#39;path_61&#39; name=&#39;path_system&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;x:PALLET_NUM&#39; category=&#39;EVENT&#39; id=&#39;path_62&#39; name=&#39;pallet_num&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>/Path<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/Components<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>/Controller<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>Systems name=&#39;systems&#39; id=&#39;systems_63&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>Components<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>Electric name=&#39;electric&#39; id=&#39;electric_64&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;POWER_STATE&#39; category=&#39;EVENT&#39; id=&#39;electric_65&#39; name=&#39;power&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;TEMPERATURE&#39; category=&#39;CONDITION&#39; id=&#39;electric_66&#39; name=&#39;electric_temp&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>/Electric<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>Hydraulic name=&#39;hydraulic&#39; id=&#39;hydraulic_67&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;PRESSURE&#39; category=&#39;CONDITION&#39; id=&#39;hydraulic_68&#39; name=&#39;hydra_cond&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>/Hydraulic<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>Coolant name=&#39;coolant&#39; id=&#39;coolant_69&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;PRESSURE&#39; category=&#39;CONDITION&#39; id=&#39;coolant_70&#39; name=&#39;coolant_pres&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;TEMPERATURE&#39; category=&#39;CONDITION&#39; id=&#39;coolant_71&#39; name=&#39;coolant_temp&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;LEVEL&#39; category=&#39;CONDITION&#39; id=&#39;coolant_72&#39; name=&#39;coolant_level&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>/Coolant<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>Pneumatic name=&#39;pneumatic&#39; id=&#39;pneumatic_73&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;PRESSURE&#39; category=&#39;CONDITION&#39; id=&#39;pneumatic_74&#39; name=&#39;pneu_cond&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>/Pneumatic<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/Components<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>/Systems<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>Interfaces name=&#39;interfaces&#39; id=&#39;interfaces_75&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>Components<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>MaterialLoader name=&#39;material_loader&#39; id=&#39;material_loader_76&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;MATERIAL_LOAD&#39; category=&#39;EVENT&#39; id=&#39;material_loader_77&#39; name=&#39;material_load&#39; subType=&#39;REQUEST&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;MATERIAL_UNLOAD&#39; category=&#39;EVENT&#39; id=&#39;material_loader_78&#39; name=&#39;material_unload&#39; subType=&#39;REQUEST&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;LINK_STATE&#39; category=&#39;EVENT&#39; id=&#39;material_loader_79&#39; name=&#39;robo_link&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>/MaterialLoader<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>ChuckInterface name=&#39;chuck_interface&#39; id=&#39;chuck_interface_80&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;OPEN_CHUCK&#39; category=&#39;EVENT&#39; id=&#39;chuck_interface_81&#39; name=&#39;open_chuck&#39; subType=&#39;RESPONSE&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;CLOSE_CHUCK&#39; category=&#39;EVENT&#39; id=&#39;chuck_interface_82&#39; name=&#39;close_chuck&#39; subType=&#39;RESPONSE&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>/ChuckInterface<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>DoorInterface name=&#39;door_interface&#39; id=&#39;door_interface_83&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;OPEN_DOOR&#39; category=&#39;EVENT&#39; id=&#39;door_interface_84&#39; name=&#39;open_door&#39; subType=&#39;RESPONSE&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>DataItem type=&#39;CLOSE_DOOR&#39; category=&#39;EVENT&#39; id=&#39;door_interface_85&#39; name=&#39;close_door&#39; subType=&#39;RESPONSE&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>/DoorInterface<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/Components<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>/Interfaces<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>Door name=&#39;door&#39; id=&#39;door_86&#39;<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>DataItem type=&#39;DOOR_STATE&#39; category=&#39;EVENT&#39; id=&#39;door_87&#39; name=&#39;door_state&#39;/<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>/Door<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>Stock name=&quot;stock&quot; id=&quot;stock&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>DataItem category=&quot;EVENT&quot; id=&quot;material&quot; name=&quot;material&quot; type=&quot;MATERIAL&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/DataItems<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>/Stock<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/Components<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>/Device<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/Devices<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/MTConnectDevices&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>h3. Future Enhancements</p>

<p>The most significant future enhancement to the standard and the
messaging semantics will be the addition of multiple devices and a
many-to-many relationship between machine tools, CMMS, gauges, and
multiple fixed or mobile robots. This can be achieved using an
extension to the standard to allow for interface bindings.</p>

<p>We are proposing a lazy locking scheme where we provide a new data
item within each interface that allows the devices to “pair” for the
duration of the operation. For example, during the material load
operation, the machine tool and the robot will each have a data item,
for the sake of discussion, we can call it Binding that will have the
following values: @UNAVAILABLE@, @AVAILABLE@, or &lt;device-id&gt;. If it is
@AVAILABLE@ then it can be bound to a device that is capable of
fulfilling the request. Once bound it will change to the device Id of
the associated device.</p>

<p>The mechanism will resolve disputes by allowing the requester to
choose the responder from the available devices that are
volunteering. So, if a machine tool wants material loaded and the cell
has multiple Robots capable of loading material, multiple Robots may
try to bind to the request, but only one will be accepted. The
sequence will be as follows:</p>

<h1>Cnc 1 material loader binding @AVAILABLE@</h1>

<h1>Cnc 1 material loader @MaterialLoad@ @ACTIVE@</h1>

<h1>Robot 1 material loader binding Cnc 1</h1>

<h1>Robot 2 material loader binding Cnc 1</h1>

<h1>Cnc 1 material loader binding Robot 2</h1>

<h1>Robot 1 material loader binding @AVAILABLE@</h1>

<h1>Robot 2 material loader @MaterialLoad@ @ACTIVE@</h1>

<h1>Robot 2 material loader @MaterialLoad@ @COMPLETE@</h1>

<h1>Cnc 1 material loader @MaterialLoad@ @READY@</h1>

<h1>Robot 2 material loader @MaterialLoad@ @READY@</h1>

<h1>Cnc 1 material loader binding @AVAILABLE@</h1>

<h1>Robot 2 material loader binding @AVAILABLE@</h1>

<p>In this way the robot and the CNC will coordinate the associations and
the temporary bindings between devices. Having the requester make the
selection is easiest way to resolve the possible locking issues
between multiple devices and still have a complete read-only
interface. The failure scenarios remain mainly the same with some bind
timeout issues that will need to be resolved.</p>

<p>This is a very high level conceptual model and will require full
design, architecture, and testing, the same as the previous interface
went through. This same architecture should work with both mobile and
stationary devices (though that will need to be explored as well.) The
scheme borrows from optimistic locking mechanisms in databases and
other technologies for distributed resource sharing.</p>

<p>Additional device models and interactions will also be required if
devices other than CNC machine tools are involved in these extensions
as well. This architecture will be well suited for an electronic
manufacture floor with full automation and device monitoring as well
as resource management.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring MTConnect Streams: MTConnect Graphr]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2012/07/02/monitoring-mtc-streams-mtconnect-graphr/"/>
    <updated>2012-07-02T11:15:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2012/07/02/monitoring-mtc-streams-mtconnect-graphr</id>
    <content type="html"><![CDATA[<p>A few months back I took up the fun task of exploring MTConnect streams and the amazing possibilities which it presented to a developer. That culminated into a web base monitoring app, MTConnect Graphr, which can now be downloaded from <a href="http://github.com/princearora/mtconnect-graphr">Github</a>. In this post I&rsquo;ll run down through the development process of the same.</p>

<p>The web scene has changed remarkably in a past few years. Web applications are expected to be compatible to smartphones and tablets. They are supposed to be clean and responsive. This requirement was enough to persuade me to use <a href="http://twitter.github.com/bootstrap/">Bootstrap by Twitter</a> as the basic framework for the app. It is tiny, expandable and has good documentation to get you started.</p>

<p>Coming to the implementation, the first task was to dynamically connect to the XML stream provided by the MTConnect Agent. Though it sounds pretty easy, the task becomes a bit tricky because it requires a recurring connection with external urls. The easiest way out of this situation is to implement a PHP proxy. For this we write a PHP loader script, and then use it every time we need to connect to an external host.</p>

<pre><code>header('Content-type: application/xml'); //specififying the return content type
$q = $_GET['url'];
  handle = fopen($q, "r");              //connecting to the url
if ($handle) {                          
    while (!feof($handle)) {
        $buffer = fgets($handle, 4096);
        echo $buffer;                  //reading and returning content
    }
    fclose($handle);
}
</code></pre>

<p>That sums up our <code>loader.php</code>. Next all we need to do is to write a simple function to load the XML file via the proxy.</p>

<pre><code>function getCurrentXML(conn_url) {              //function to retrieve a xml file 
    var n = "";
    return $.ajax({
        url: "loader.php?url=http://"+conn_url, //using the proxy
        cache: !1,
        async: !1,
        dataType: "txt",
        success: function (t) {
            n = t
        }
    }), n
}
</code></pre>

<p>Once we have access to the XML stream, there are a plethora of tools available to parse and get data out of it. I chose to use a combination of jQuery and JSON for the job. The xml2json plugin available <a href="http://www.fyneworks.com/jquery/xml-to-json/">here</a> provided an easy conversion to JSON.</p>

<pre><code>var xmldata = getCurrentXML(conn_url),
    i = $.xml2json(xmldata);
</code></pre>

<p>With JSON, life is easy. It can&rsquo;t be any simpler to parse data than it is with JSON. All I did was to write regular funtions to parse conditions and device parameters. But there is a catch. Not all XML tags will be meaningful and to make them appear right, we need to write individual functions for each of them. Here I will explain the working of the function used to parse the conditions for all parameters.</p>

<pre><code>this.getCondition = function (n) {
  var r=new Object();
  r.type= new Array(),r.value=new Array();
  var count=0;
  for (var t = 0; t &lt; n.ComponentStream.length; t++) {
    var i = n.ComponentStream[t],
        u = i.name;
    if (i.Condition)
    {
      var v = i.Condition;
      if(v.Normal){ if(v.Normal.length&gt;1){
        for(var f =0; f &lt; v.Normal.length; f++)
        {
          r.type[count] =  u+' '+v.Normal[f].type;
          r.value[count++] = "Normal"
        }}
      else{
          r.type[count] =  u+' '+v.Normal.type;
          r.value[count++] = "Normal"}
        }
      ..........
      //similarly for other conditions 
     }r.len=count;
   }
       return r 
},
</code></pre>

<p>Though this takes away the reusability of the script, the data displayed turns out to be easier to comprehend.</p>

<p>With all these pieces in place, a simple requirement is to refresh the input from the MTC stream every few milliseconds. A recursive function with delay takes care of that</p>

<pre><code>var updateFromMTC = function(){
.....
  setTimeout('updateFromMTC("'+conn_url+'")' , 1000);
.....
}
</code></pre>

<p>The task we confront next is to display it elegantly. That is taken care by using power of HTML5. The devices in the stream are populated at the top of the page with the color of each dependent on the availability of the device. To display all the parameters we use two empty divs, in which the parameters and the conditions are populated using a javascript user function.</p>

<pre><code>&lt;div class="container" id='SelStats' position='absolute'"&gt;
  &lt;div id='conditions' position='absolute'&gt;&lt;/div&gt;
&lt;/div&gt;

var updateSelected = function(){
 if(thePage.ActiveShape){
   var selShp = thePage.ActiveShape;
    var SelDisplay = document.getElementById('SelStats');
    if(SelDisplay &amp;&amp; selShp){
     if(selShp.deviceName != ''){
        $(SelDisplay).empty();
        $(SelDisplay).append('&lt;b&gt;Machine:&lt;/b&gt;' + selShp.text);
        ......
</code></pre>

<p>So, this completes the basic task of monitoring an MTConnect stream. Next we need to plot it. There are some really advanced open source scripts out there to assist plotting data, but for this particular task <a href="http://smoothiecharts.org/">Smoothie Charts</a> seemed a perfect fit to me. It is a really small charting library designed for live streaming data. Integration with the existing code was easy. A few more lines to the code, and it plots like a charm.</p>

<pre><code>var smoothie = new SmoothieChart();
  smoothie.streamTo(document.getElementById("mycanvas") 3000 /*delay*/);
var line1 = new TimeSeries();
  setInterval(function() {line1.append(new Date().getTime(), math.random());}, 3000 /*delay*/);
</code></pre>

<p>Finally, we need to add an emergency alarm light for the parameter being monitored. A slick form to enter the maximum/minimum value, and a basic function to compare instantaneous values are enough to pull it off. With the div being populated dynamically every few seconds, we need to save some info in a cookie which is made easy by the <a href="https://github.com/carhartl/jquery-cookie/">jQuery-cookie</a> plugin.</p>

<div style="text-align: center;">
<img src="http://www.manufacturingbigdata.com/images/graphr-1.jpg" width=360 height=600 /> <img src="http://www.manufacturingbigdata.com/images/graphr-2.jpg" width=360 height=600 /> </div>


<p>I guess that&rsquo;s it. The app is ready to roll. I checked it out locally on a PC, iPOD touch and an android device. Seems to be working fine for me. Let me know if any of you notice anything off about it.</p>

<p>PS: Please ensure that the application is run on a PHP server. Otherwise the application will fail to connect to the stream and all you will see is a white blank page. I&rsquo;d recommend WAMP/LAMP for users trying it on their personal PCs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up a MTConnect Agent on a Linux (Ubuntu) machine]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2012/03/16/Setting-up-a-MTConnect-Agent-on-a-Linux-machine/"/>
    <updated>2012-03-16T16:10:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2012/03/16/Setting-up-a-MTConnect-Agent-on-a-Linux-machine</id>
    <content type="html"><![CDATA[<p>This was blogged first at my personal blog <a href="http://princearora.wordpress.com/2012/02/24/setting-up-a-mtconnect-agent-on-a-unixubuntu-machine/">here</a>.</p>

<p>While working on my internship project, I got a chance to test out an MTConnect agent built in C++ for Linux (ubuntu). I was surprised to find that absolutely no documentation existed for setting up the Agent in a Linux environment. Although it didn&rsquo;t turn out to be a big hassle in the end, I thought that it would be a good idea to list down the process of setting up a MTConnect agent on Linux. So, here you go:</p>

<ul>
<li>Download the zip archive of the latest version of MTConnect C++ Agent SDK from MTConnect Github and extract its contents onto your local disk.</li>
<li><p>Download &amp; Install libxml-2.0 and libxml-dev packages from the apt repository.</p>

<pre><code>  $ apt-get install libxml2
  $ apt-get install libxml2-dev
</code></pre></li>
<li><p>Now you need to prepare a Makefile in order to compile the agent. This can be done using the Cmake package. Download &amp; install cmake if you don&rsquo;t already have it.</p>

<pre><code>  $ apt-get install cmake     
</code></pre></li>
<li><p>Open the &lsquo;agent&rsquo; folder in the terminal and run cmake and make.</p>

<pre><code>  $ cd agent/
  $ cmake .
  $ make 
</code></pre></li>
<li><p>If everything went right, your agent would have been build. You can now start it off as a service.</p>

<pre><code>  $ ./agent daemonize 
</code></pre></li>
<li><p>If you are unsure whether the process is running, you can check out the process status:</p>

<pre><code>  $ ps aux | grep agent 
</code></pre></li>
</ul>


<p>The agent service should be up and running. You may change the agent.cfg file in any text editor based on the instructions here.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
</feed>
