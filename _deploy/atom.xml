<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Manufacturing Big Data]]></title>
  <link href="http://www.manufacturingbigdata.com/atom.xml" rel="self"/>
  <link href="http://www.manufacturingbigdata.com/"/>
  <updated>2013-06-14T07:59:43+05:30</updated>
  <id>http://www.manufacturingbigdata.com/</id>
  <author>
    <name><![CDATA[System Insights]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Call for Papers: Information Modeling and Big Data]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2013/06/14/cfp/"/>
    <updated>2013-06-14T07:46:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2013/06/14/cfp</id>
    <content type="html"><![CDATA[<p>I am the guest editor for a special issue on &ldquo;Information Modeling and Big Data: Issues and Challenges&rdquo; to be published in the <a href="http://computingengineering.asmedigitalcollection.asme.org/">ASME Journal of Computing and Information Science in Engineering</a>. We are soliciting papers for this special issue, and if you are more interested, please see <a href="https://www.asme.org/getmedia/440280f8-9861-455f-b7e5-8b69193e6d70/ASME-JCIS-SPECIAL-ISSUE-PROPOSAL-5-2013.aspx">here</a>. If you have any questions you can contact me as well (my information is in the ASME link).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MTConnect ROS-I Robot CNC Integration]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2013/06/07/mtconnect-ros-i-robot-cnc-integration/"/>
    <updated>2013-06-07T23:38:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2013/06/07/mtconnect-ros-i-robot-cnc-integration</id>
    <content type="html"><![CDATA[<style type="text/css">
ol { margin-left: 2.5em; }
article blockquote { font-size: 1em; }
</style>
<h2>Robotic Interface – Machine Tool Perspective</h2>
<blockquote>
<p>This work was conducted under Grant Opportunity Number
2012-<span class="caps">NIST</span>-<span class="caps">MSE</span>-01 for the Intelligent System Division of the National
Institute of Standards and Technology (<a href="http://www.nist.gov"><span class="caps">NIST</span></a>)
with the collaboration of <a href="http://www.systeminsights.com">System Insights</a>, 
<a href="http://www.swri.org">SwRI</a> (Southwest Research
Institute), <a href="http://ncdmm.org"><span class="caps">NCDMM</span></a> (National Center for Defense
Manufacturing and Machining), <a href="http://amtonline.org"><span class="caps">AMT</span></a> (Association
for Manufacturing Techknowlogy) and <a href="http://www.mazakusa.com">Mazak <span class="caps">USA</span></a>
for help with connectivity of the machine tool used in the
demonstration.</p>
</blockquote>
<div style="text-align:center;"><iframe src="https://docs.google.com/a/systeminsights.com/file/d/0B3fQZcJeBjGOekNuZzJQMm1IeEU/preview" width="640" height="385"></iframe></div>
<p><br/></p>
<p>From the machine tool perspective, the Robot is an external entity
that loads and unloads material into and from its work-holding. This
function can be carried out by a person, a robot, a mobile material
handler, an operator, or a highly trained golden retriever. The
machine does not care how the material is supplied, just that the task
has been completed so it can start its cutting cycle.</p>
<p>The innovation in the MTConnect interface is the ability to abstract
the task being performed from the underlying implementation necessary
to complete the task. To load material into a machine tool, the robot
has to have knowledge of the location of the work-holding and the
necessary approach angles as well as any collision domains within the
machine enclosure. From the machine tools perspective, this is all
inconsequencial as long as it gets its material.</p>
<p>Once complete, the machine tool needs to be able to ask for the
material to be removed. This is also accomplished at the higher level
by requesting the material get unloaded. At that point, the machine
tool does not care where the material is going; it only needs to
request another piece of material for subsequent processing. It is up
to the Robot sequence the material to the next station.</p>
<p>From the Robots perspective, it knows how to pick up a new piece of
material and place it in the machine tool and where to place the
material once it has removed it. It has two needs that need to be
fulfilled from the machine tool, opening and closing the door and
opening and closing the chuck.</p>
<h4>The “interfaces” provided by each device is as follows:</h4>
<div style="margin-left:2em;">
<p><strong>Machine Tool Requests:</strong></p>
<ol>
	<li>LoadMaterial</li>
	<li>UnloadMaterial</li>
</ol>
<p><strong>Robot Requests:</strong></p>
<ol>
	<li>OpenDoor</li>
	<li>CloseDoor</li>
	<li>OpenCluck</li>
	<li>CloseChuck</li>
</ol>
</div>
<p>The rational for having the Robot make the requests of the machine
tool is the reduction of failure due to timing related issues. When
the machine tool has requested the material load and unload, it
has no way to sense the location of the robot and the presence of
material in the chuck. When the Robot begins its cycle it checks the
current door state, if the door is closed, it will request the machine
tool open the door. It may also ask the machine tool to open the chuck
at the same time. The machine tool will respond with an Active →
Complete sequence stating that it has completed the task or it will
Fail if it is incapable.</p>
<p>The Robot requires the machine to be have the door and the chuck must
be open before it can insert material. Once the material is in place,
the Robot asks the machine tool to close the chuck. It must not
release the material until the chuck is closed or else it will be
dropped. The machine tool will track the state of the chuck and a
positive engagement before it changes the chuck state and signals the
task as complete.</p>
<p>The same goes for the door; the machine tool has no knowledge of the
position of the Robot and therefore does not know when the Robot is
safely outside the enclosure. The Robot therefor asks for the door to
be closed once it knows there are no issues. This decouples the issue
of load completion timing with the door actuation.</p>
<p>Messaging at this higher semantic level provides the basis for a
lighter weight protocol that has simplified failure recovery scenarios
and less coupling of inter-related components. Decoupling of
components allows us to more readily replace parts of the system, like
replace the Robot or the machine tool with another device that can
perform the required activity and have the interface layer stay the
same.</p>
<h3>Machine Tool Architecture Overview</h3>
<p>The MTConnect <span class="caps">CNC</span> architecture consists of three components – the
MTConnect adapter for the machine tool to report states, the MTConnect
agent to provide MTConnect protocol and <span class="caps">XML</span> formatting, and the
Interface Control Layer (<span class="caps">ICL</span>) that listens to other devices and
coordinates the activities. The adapter and agent are the standard
out-of-the box MTConnect components for the machine tool. Minor
additions were made to the adapter to support chuck state for use in
this project. That addition will be proposed to the MTConnect standard
in future versions (more on that later.)</p>
<p style="text-align:center;"><img src="http://www.manufacturingbigdata.com/images/2013-06-07-figure1.png" title="Figure 1" alt="Figure 1" /></p>
<p style="text-align:center;"><em>Figure 1</em></p>
<p>The <span class="caps">ICL</span> layer is a client of both the <span class="caps">CNC</span> agent and the Robot agent
and publishes only the state of the interface data items. This allows
us to relegate the machine status to the machine tool and separate out
the responsibility to react to the changes in the state of both robot
and <span class="caps">CNC</span> to the <span class="caps">ICL</span> layer. This layer also instructs the machine tool
to do one of the following six operations:</p>
<ol>
	<li>Open Door</li>
	<li>Close Door</li>
	<li>Open Chuck</li>
	<li>Close Chuck</li>
	<li>Start Cycle</li>
	<li>Reset/Stop Cycle</li>
</ol>
<p>These actions are invoked on the machine tool controller by sending
the instructions that resolve into the <span class="caps">PLC</span> or <span class="caps">API</span> specific
operations. For the demonstration at <span class="caps">NIST</span> this was accomplished by
invoking a small utility on the controller the set various <span class="caps">PLC</span>
registers to actuate the chuck, cycle start and reset. We could not
open and close the door since the machine was not equipped with an
actuator; to do so would have incurred a large additional cost. The door
behavior was therefor synthesized for the demonstration.</p>
<h3>Messaging Architecture</h3>
<p style="text-align:center;"><img src="http://www.manufacturingbigdata.com/images/2013-06-07-figure2.png" title="Figure 2" alt="Figure 2" /></p>
<p style="text-align:center;"><em>Figure 2</em></p>
<p>MTConnect uses a very simple messaging architecture based on the
MTConnect read-only philosophy. Instead of sending a message
requesting an action be performed or setting a variable on a remote
device, MTConnect has each device announce its needs to any
application or device monitoring its state. In effect,	 the request
interface is a simple state machine that goes from Not-Ready to
Ready. And when the interface would like the activity performed, it
transition to Active.</p>
<p>In turn, it waits for the device performing the activity, the
responder, to announce it is actively performing the activity and then
to change to the complete state when its done. This provides the basis
for the coordination of actions between devices. Currently this scheme
has been tested between two devices paired directly. In the future
enhancements section of this report, we will discuss some ideas to
extend this paradigm to multiple interconnected devices supporting
cells or even swarms of devices in a mobile environment.</p>
<p>Figure 1 shows the state transitions and intermediate as well as
terminal states. This model is currently implemented using an
MTConnect Event with the subType of <code>REQUEST</code> or <code>RESPONSE</code> to
indicate its behavior. In the next section we will have a more
in-depth discussion of the failure scenarios and how recovery is to be
handled. The MTConnect machine tool simulator and state machine
implements many of these scenarios and references to the actual
implementation will be provided.</p>

<p style="text-align:center;"><img src="http://www.manufacturingbigdata.com/images/2013-06-07-figure3.png" title="Figure 3" alt="Figure 3" /></p>
<p style="text-align:center;"><em>Figure 3</em></p>
<p>In the MTConnect standard, the current state of a device can be
determined by making an <span class="caps">HTTP</span> request and specifying the device name
and current, for example: <code>http://localhost:5000/cnc/current</code> will
provide the current state of the “cnc” device on the local
machine. The result will come back to the client or requestor in <span class="caps">XML</span>
which they can then parse to find the information they need. From that
point on, near-real-time data can be received on a push basis (meaning
there is no need to poll) using the MTConnect streaming capability
using the sample request. To get a completely contiguous data set, one
uses the nextSequence number presented in the current to begin the
push based request as follows:</p>
<pre>
http://localhost:5000/cnc/sample?from=100231&amp;interval=0
</pre>
<p>This will provide data immediately after it arrives (usually within
3ms) to the client. The interval=0 means never delay and wait for
additional data to arrive before sending out the updates. It is
usually best accompanied by a filter to make sure we don’t load the
communications or the processes unnecessarily. This can be done by
providing a path as an argument.</p>
<pre>
http://localhost:5000/cnc/sample?from=100231&amp;interval=0&amp;path=//DataItem[@type="CONTROLLER_MODE"or@type="EXECUTION"or@type="CHUCK_STATE"or@type="AVAILABILITY"or\@category="CONDITION”]|//Interfaces
</pre>
<p>The example will give us only the controller mode, chuck state,
execution, conditions, as well as all the information from the
interfaces. This is the full set of data required by the Robot to
operate.</p>
<p>For the purposes of this discussion, we will focus on the interfaces
and a few key <span class="caps">CNC</span> and Robot states that are required for coordination
of interaction. The following is based on the implementation of
interfaces for the <span class="caps">ROS</span>/I MTConnect demonstration. For more information
on streaming data handling and event processing, please consult Part 1
of the MTConnect standard.</p>
<h3>State Machines</h3>
<h4>The implementation of the machine tool <span class="caps">ICL</span> consists of 7 state machines, they are as follows:</h4>
<ol>
	<li>Top level machine tool</li>
	<li>Material load</li>
	<li>Material unload</li>
	<li>Open chuck</li>
	<li>Close chuck</li>
	<li>Open door</li>
	<li>Close door</li>
</ol>
<p>The top level state machine controls the main operational and
non-operation states of the machine tool. There are two top-level
states the machine can be in, disabled and operational. In the
disabled state there are two sub-states, not-ready and fault. When the
machine tool is in an alarm active state, the state machine is in a
fault state. The other disabled state is not-ready which is when the
machine tool is not in automatic mode or is not read to execute the
part program.</p>
<p>The operational states are one of the following: idle, cycle_start,
loading, or unloading. The machine tool becomes operational when the
machine tool’s controller mode is in automatic and it is ready to run
the part program. If the robot is not ready, the machine tool will
remain in an idle state until the robot is ready. When the robot is
ready, the machine tool will transition into the loading or unloading
states depending on whether the machine has material.</p>
<p>Once the machine completes the material load, it will transition into
a cycle start state. The cycle start state will transition once the
cycle is complete indicated by the execution transitioning from active
to ready. The machine will then go into an unloading state signaling
the robot to remove the material.</p>
<p style="text-align:center;"><img src="http://www.manufacturingbigdata.com/images/2013-06-07-figure4.png" title="Figure 4" alt="Figure 4" /></p>
<p style="text-align:center;"><em>Figure 4</em></p>
<p>The other 6 state machines represent two interface types, request and
response. We have two requests (load and unload) and four responses
(open/close chuck and door). For this discussion we will be presenting
only one representation of each, the open door and the material load.</p>
<p>The response state machine consists of a single level where the states
are equivalent to the MTConnect interface proposal. The states are
not_read, ready, active, complete, and fail. The feedback from the
machine tool’s state variable (DoorState in this instance) will
trigger the transitions from active to complete. Since we did not have
a real door actuator, this was simulated by a timer. The chuck state
did operate off of the machine tool chuck’s solenoids.</p>
<p>The door interface values will track the states in this state machine
and are modified directly in this module. The rest of the states and
transitions are managed externally by the top level state machine or
the machine tool itself. One additional feature of this state machine
is it will coordinate with its inverse operation and validate they are
not both active at the same time. So, in the case of the open door
interface, the close door interface will fail if the open door is
currently active. The door cannot be opening and closing at the same
time.</p>
<p>Most of the complexity in the response state machine is handling of
failures. If anything goes wrong on the robot or machine tool side, we
immediately fail. The failure signal is used to indicate a fault has
occurred and transitions into a fail state. In both the request and
the response, a fail transition will transition the top level state
machine into a failure if the operation is active. More discussion
will be provided in the Failure and recovery section of this document.</p>
<p style="text-align:center;"><img src="http://www.manufacturingbigdata.com/images/2013-06-07-figure5.png" title="Figure 5" alt="Figure 5" /></p>
<p style="text-align:center;"><em>Figure 5</em></p>
<p>The second class of state machine is the request. The request is in
one of the following states, not-ready, active, processing, fail, and
ready. All states except for processing are direct parallels to the
proposed changes to the MTConnect standard, the processing state
tracks the active state on the Robot and transitions to not ready once
the operation is complete. The reason we transition to not-ready
instead of ready is because once the material has been successfully
loaded, we cannot load again, therefor the interface is now not
available until the machine has been unloaded.</p>
<p style="text-align:center;"><img src="http://www.manufacturingbigdata.com/images/2013-06-07-figure6.png" title="Figure 6" alt="Figure 6" /></p>
<p style="text-align:center;"><em>Figure 6</em></p>
<h3>Failure and Recovery</h3>
<p>This section will discuss the different operational scenarios of the
machine tools. Since all states and transitions can be derived from
the events that occur from the state changes in robot and the machine
tool, we will present the code used to test the state machine and the
expected behavior. These “tests” will serve as the basis of the
behavioral documentation for the MTConnect interface definition in the
subsequent versions of the standard.</p>
<p>The first set of scenarios will present the positive cases where we
will show the successful operation of the door and the chuck. The
later cases will walk through the steps demonstrating what happens
when a component fails and what the recovery scenario is. All examples
are “runnable”, meaning they have been executed and validated with the
current implementation of the machine tool state machine.</p>
<p>For all the tests, we make sure the devices are in an operation state
before we begin our scenarios. Otherwise the machine tool interfaces
will be non-operational. The initiation sequence of events are as
follows:</p>
<pre>
    Given robot Availability is Available
    And robot ControllerMode is Automatic
    And robot Execution is Active
    And robot MaterialLoad is Ready
    And robot MaterialUnload is Ready
    And robot OpenDoor is Ready
    And robot CloseDoor is Ready
    And robot OpenChuck is Ready
    And robot CloseChuck is Ready
    And cnc ControllerMode is Automatic
    Then cnc MaterialLoad should be Active
    And cnc MaterialUnload should be Not_Ready
</pre>
<p>The machine tool is now in an operational state waiting to have
material loaded. This is asserted using the following expression and
will precede all scenarios.</p>
<pre>
  Background: Machine Tool and Robot are operational
    Given Devices are in initial state
</pre>
<p>Actuation of the door and chuck are operationally separate for the
loading and unloading of material. When the machine is in cycle the
door may not open as well as the chuck being locked. But at other
times the robot is free to request the machine tool open and close the
chuck and door to fulfill its needs. The following scenarios test
these functions.</p>
<pre>
  Scenario: Robot asks Cnc to Open Door
    Given cnc MaterialLoad should be Active
    When robot OpenDoor becomes Active
    Then cnc DoorState should be Open

  Scenario: Robot asks Cnc to Open Chuck
    Given cnc MaterialLoad should be Active
    When robot OpenChuck becomes Active
    Then cnc OpenChuck should be Active
    When cnc ChuckState becomes Unlatched
    When cnc ChuckState becomes Open
    Then cnc ChuckState should be Open
</pre>
<p>The following is the full scenario of a material load with chuck and
door operations. Once the robot completes the material load, we
validate that the machine tool starts the cycle.</p>
<pre>
  Scenario: Cnc asks Robot to Load Material
    Given cnc MaterialLoad should be Active
    When robot MaterialLoad becomes Active
</pre>
<p>The following code statement validates the state of a given state
machine.</p>
<pre>
    Then material load state should be processing
</pre>
<p>The following steps open the door and make sure we’re still in a
loading state.</p>
<pre>
    And cnc DoorState should be Open
    And cnc ChuckState becomes Open
    And cnc ChuckState should be Open
    Then machine state should be loading
</pre>
<p>Now the chuck is closed and all states are confirmed</p>
<pre>
    When robot CloseChuck becomes Active
    Then cnc CloseChuck should be Active
    And cnc ChuckState becomes Closed
    And cnc CloseChuck should be Complete
    And robot CloseChuck becomes Ready
    And cnc CloseChuck should be Ready
</pre>
<p>After the chuck is closed and the robot has retracted a safe distance,
the robot requests the machine tool close the door</p>
<pre>
    When robot CloseDoor becomes Active
    Then cnc CloseDoor should be Active
    Then after 1.2 seconds cnc CloseDoor should be Complete
    And cnc DoorState should be Closed
</pre>
<p>The completes the material load and the machine tool cycle
starts. Material load becomes not ready indicating the robot cannot
load more material. The robot is still ready to load if asked to do
so.</p>
<pre>
    When robot MaterialLoad becomes Complete
    And robot MaterialLoad becomes Ready
    Then machine state should be cycle_start
    And cnc MaterialLoad should be Not_Ready
    And robot MaterialLoad becomes Ready
</pre>

<h4>Failure Scheario 1:</h4>
<pre>
  Scenario: Cnc fails to start cycle
    Given robot MaterialLoad becomes Active
</pre>
<p>The following statement causes the execution data item to fail once it
attempt to change.</p>
<pre>
    And simulate fail exec
</pre>
<p>This section creates the correct state of all the data items and then
takes it through a single set of operations</p>
<pre>
    And Chuck is closed
    And Door is closed
    And robot MaterialLoad becomes Complete
    And robot MaterialLoad becomes Ready
    And cnc MaterialLoad should be Not_Ready
</pre>
<p>Make sure we are in the correct fault state when the load completes</p>
<pre>
    And machine state should be fault
</pre>

<h4>Failure scenario 2:</h4>
<p>The second failure scenario we will discuss is a failure to load a
piece of material. This results in the machine tool entering into an
idle state after acknowledging the failure of the material load. The
scenario assert at the bottom that the machine state should be idle
since the machine is ready to run, but the robot is not operational.</p>
<p>The final steps are the robot clearing the fault and becoming ready
again. The machine tool enters re-enters the loading state since the
material never arrived successfully. The material unload operation
work in much the same way with the same recovery pattern.</p>
<pre>
  Scenario: Robot can't load material
    Given cnc MaterialLoad should be Active
    And robot MaterialLoad becomes Active
    And Chuck is closed
    And Door is closed

    When robot MaterialLoad becomes Fail
    Then cnc MaterialLoad should be Fail
    And material load state should be fail

    When robot MaterialLoad becomes Not_Ready
    And robot faults ACTUATOR with "Flame"
    And machine state should be idle

    When robot clears ACTUATOR
    And robot MaterialLoad becomes Ready
    And machine state should be loading
</pre>
<p>There are numerous additional scenarios that have been written for
validation of the project. They can be found at: <a href="https://github.com/mtconnect/ros_bridge/tree/nist/simulator/features">https://github.com/&#8230;/simulator/features</a></p>
<h3>Enhancements to the MTConnect Standard</h3>
<p>To implement a basic Robot to machine tool interface where we have one
Robot loading one Machine Tool, the possible additions to the MTConnect
standard are pretty minimal. The following data items were required on
the machine tool side to represent the states of all components and
the necessary interface events.</p>
<ol>
	<li><code>ChuckState</code> was added to the primary <code>Rotary</code> axis “C” with the values of <code>OPEN</code>, <code>CLOSED</code>, <code>UNLATCHED</code> and <code>UNAVAILABLE</code>.</li>
	<li>A top level device Interfaces component was added to hold all the interfaces.</li>
	<li>A <code>MaterialLoader</code> component was added as a child of the Interfaces component with the following data items:
	<ol>
		<li><code>MATERIAL_LOAD</code> with subtype <code>REQUEST</code>.</li>
		<li><code>MATERIAL_UNLOAD</code> with subtype <code>REQUEST</code>.</li>
		<li><code>LINK_STATE</code> that indicates if the interface is active with values <code>ACTIVE</code> , <code>INACTIVE</code>, or <code>UNAVAILABLE</code>.</li>
	</ol></li>
	<li>A <code>ChuckInterface</code> component was added as a child of the Interfaces component with the following data items:
	<ol>
		<li><code>OPEN_CHUCK</code> with subtype of <code>RESPONSE</code>.</li>
		<li><code>CLOSE_CHUCK</code> with subtype of <code>RESPONSE</code>.</li>
	</ol></li>
	<li>A <code>DoorInterface</code> component was added as a child of the Interfaces component with the following data items:
	<ol>
		<li><code>OPEN_DOOR</code> with subtype of <code>RESPONSE</code>.</li>
		<li><code>CLOSE_CLOSE</code> with subtype of <code>RESPONSE</code>.</li>
	</ol></li>
</ol>
<p>The remainder of the machine tool components and data items are the
standard composition of any standard Mazak implementation. The entire
Devices.xml file is provided below. The sections in bold are the areas
we have used to drive the state machine, the sections in bold italic
are new to the standard.</p>
<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Devices.xml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="cp">&lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&gt;</span>
</span><span class='line'>  <span class="nt">&lt;MTConnectDevices</span> <span class="na">xmlns:mt=</span><span class="s">&#39;urn:mtconnect.org:MTConnectDevices:1.2&#39;</span> <span class="na">xmlns:xsi=</span><span class="s">&#39;http://www.w3.org/2001/XMLSchema-instance&#39;</span> <span class="na">xmlns=</span><span class="s">&#39;urn:mtconnect.org:MTConnectDevices:1.2&#39;</span> <span class="na">xsi:schemaLocation=</span><span class="s">&#39;urn:mtconnect.org:MTConnectDevices:1.2 http://www.mtconnect.org/schemas/MTConnectDevices_1.2.xsd&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Header</span> <span class="na">creationTime=</span><span class="s">&#39;2013-04-22T15:24:26Z&#39;</span> <span class="na">assetBufferSize=</span><span class="s">&#39;1024&#39;</span> <span class="na">sender=</span><span class="s">&#39;localhost&#39;</span> <span class="na">assetCount=</span><span class="s">&#39;0&#39;</span> <span class="na">version=</span><span class="s">&#39;1.2&#39;</span> <span class="na">instanceId=</span><span class="s">&#39;0&#39;</span> <span class="na">bufferSize=</span><span class="s">&#39;131072&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Devices&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Device</span> <span class="na">name=</span><span class="s">&#39;cnc&#39;</span> <span class="na">uuid=</span><span class="s">&#39;cnc&#39;</span> <span class="na">id=</span><span class="s">&#39;cnc_1&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Description</span> <span class="na">model=</span><span class="s">&#39;QTN&#39;</span> <span class="na">manufacturer=</span><span class="s">&#39;Mazak&#39;</span><span class="nt">&gt;</span>Mazak Quickturn - Mazak Quickturn for ROS/MTConnect<span class="nt">&lt;/Description&gt;</span>
</span><span class='line'>        <span class="nt">&lt;DataItems&gt;</span>
</span><span class='line'>          <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;AVAILABILITY&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;dtop_2&#39;</span> <span class="na">name=</span><span class="s">&#39;avail&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/DataItems&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Components&gt;</span>
</span><span class='line'>          <span class="nt">&lt;Axes</span> <span class="na">name=</span><span class="s">&#39;base&#39;</span> <span class="na">id=</span><span class="s">&#39;base_3&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;DataItems&gt;</span>
</span><span class='line'>              <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;ACTUATOR&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;base_4&#39;</span> <span class="na">name=</span><span class="s">&#39;servo_cond&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/DataItems&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Components&gt;</span>
</span><span class='line'>              <span class="nt">&lt;Linear</span> <span class="na">name=</span><span class="s">&#39;X&#39;</span> <span class="na">id=</span><span class="s">&#39;X_5&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;DataItems&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;POSITION&#39;</span> <span class="na">category=</span><span class="s">&#39;SAMPLE&#39;</span> <span class="na">id=</span><span class="s">&#39;X_6&#39;</span> <span class="na">name=</span><span class="s">&#39;Xabs&#39;</span> <span class="na">subType=</span><span class="s">&#39;ACTUAL&#39;</span> <span class="na">units=</span><span class="s">&#39;MILLIMETER&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;INCH&#39;</span> <span class="na">coordinateSystem=</span><span class="s">&#39;MACHINE&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;POSITION&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;X_7&#39;</span> <span class="na">name=</span><span class="s">&#39;Xtravel&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;LOAD&#39;</span> <span class="na">category=</span><span class="s">&#39;SAMPLE&#39;</span> <span class="na">id=</span><span class="s">&#39;X_8&#39;</span> <span class="na">name=</span><span class="s">&#39;Xload&#39;</span> <span class="na">units=</span><span class="s">&#39;PERCENT&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;PERCENT&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;AXIS_FEEDRATE&#39;</span> <span class="na">category=</span><span class="s">&#39;SAMPLE&#39;</span> <span class="na">id=</span><span class="s">&#39;X_9&#39;</span> <span class="na">name=</span><span class="s">&#39;Xfrt&#39;</span> <span class="na">units=</span><span class="s">&#39;MILLIMETER/SECOND&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;FOOT/MINUTE&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/DataItems&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/Linear&gt;</span>
</span><span class='line'>              <span class="nt">&lt;Linear</span> <span class="na">name=</span><span class="s">&#39;Z&#39;</span> <span class="na">id=</span><span class="s">&#39;Z_10&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;DataItems&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;POSITION&#39;</span> <span class="na">category=</span><span class="s">&#39;SAMPLE&#39;</span> <span class="na">id=</span><span class="s">&#39;Z_11&#39;</span> <span class="na">name=</span><span class="s">&#39;Zabs&#39;</span> <span class="na">subType=</span><span class="s">&#39;ACTUAL&#39;</span> <span class="na">units=</span><span class="s">&#39;MILLIMETER&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;INCH&#39;</span> <span class="na">coordinateSystem=</span><span class="s">&#39;MACHINE&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;POSITION&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;Z_12&#39;</span> <span class="na">name=</span><span class="s">&#39;Ztravel&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;LOAD&#39;</span> <span class="na">category=</span><span class="s">&#39;SAMPLE&#39;</span> <span class="na">id=</span><span class="s">&#39;Z_13&#39;</span> <span class="na">name=</span><span class="s">&#39;Zload&#39;</span> <span class="na">units=</span><span class="s">&#39;PERCENT&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;PERCENT&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;AXIS_FEEDRATE&#39;</span> <span class="na">category=</span><span class="s">&#39;SAMPLE&#39;</span> <span class="na">id=</span><span class="s">&#39;Z_14&#39;</span> <span class="na">name=</span><span class="s">&#39;Zfrt&#39;</span> <span class="na">units=</span><span class="s">&#39;MILLIMETER/SECOND&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;FOOT/MINUTE&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/DataItems&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/Linear&gt;</span>
</span><span class='line'>              <span class="nt">&lt;Rotary</span> <span class="na">name=</span><span class="s">&#39;C&#39;</span> <span class="na">id=</span><span class="s">&#39;C_15&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;DataItems&gt;</span>
</span><span class='line'>                  <span class="c">&lt;!-- Rotary Part --&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;LOAD&#39;</span> <span class="na">category=</span><span class="s">&#39;SAMPLE&#39;</span> <span class="na">id=</span><span class="s">&#39;C_16&#39;</span> <span class="na">name=</span><span class="s">&#39;Cload&#39;</span> <span class="na">units=</span><span class="s">&#39;PERCENT&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;PERCENT&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;ANGULAR_VELOCITY&#39;</span> <span class="na">category=</span><span class="s">&#39;SAMPLE&#39;</span> <span class="na">id=</span><span class="s">&#39;C_17&#39;</span> <span class="na">name=</span><span class="s">&#39;Cfrt&#39;</span> <span class="na">units=</span><span class="s">&#39;DEGREE/SECOND&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;DEGREE/MINUTE&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;ANGLE&#39;</span> <span class="na">category=</span><span class="s">&#39;SAMPLE&#39;</span> <span class="na">id=</span><span class="s">&#39;C_18&#39;</span> <span class="na">name=</span><span class="s">&#39;Cdeg&#39;</span> <span class="na">subType=</span><span class="s">&#39;ACTUAL&#39;</span> <span class="na">units=</span><span class="s">&#39;DEGREE&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;DEGREE&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;ANGLE&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;C_19&#39;</span> <span class="na">name=</span><span class="s">&#39;Ctravel&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="c">&lt;!-- Spindle part --&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;SPINDLE_SPEED&#39;</span> <span class="na">category=</span><span class="s">&#39;SAMPLE&#39;</span> <span class="na">id=</span><span class="s">&#39;C_20&#39;</span> <span class="na">name=</span><span class="s">&#39;Srpm&#39;</span> <span class="na">subType=</span><span class="s">&#39;ACTUAL&#39;</span> <span class="na">units=</span><span class="s">&#39;REVOLUTION/MINUTE&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;REVOLUTION/MINUTE&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;LOAD&#39;</span> <span class="na">category=</span><span class="s">&#39;SAMPLE&#39;</span> <span class="na">id=</span><span class="s">&#39;C_21&#39;</span> <span class="na">name=</span><span class="s">&#39;Sload&#39;</span> <span class="na">units=</span><span class="s">&#39;PERCENT&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;PERCENT&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;TEMPERATURE&#39;</span> <span class="na">category=</span><span class="s">&#39;SAMPLE&#39;</span> <span class="na">id=</span><span class="s">&#39;C_22&#39;</span> <span class="na">name=</span><span class="s">&#39;Stemp&#39;</span> <span class="na">units=</span><span class="s">&#39;CELSIUS&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;CELSIUS&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;ROTARY_MODE&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;C_23&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Constraints&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;Value&gt;</span>SPINDLE<span class="nt">&lt;/Value&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;Value&gt;</span>INDEX<span class="nt">&lt;/Value&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;Value&gt;</span>CONTOUR<span class="nt">&lt;/Value&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/Constraints&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/DataItem&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;LOAD&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;C_24&#39;</span> <span class="na">name=</span><span class="s">&#39;Sload_cond&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;TEMPERATURE&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;C_25&#39;</span> <span class="na">name=</span><span class="s">&#39;Stemp_cond&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;CHUCK_STATE&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;C_26&#39;</span> <span class="na">name=</span><span class="s">&#39;chuck_status&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/DataItems&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/Rotary&gt;</span>
</span><span class='line'>              <span class="nt">&lt;Rotary</span> <span class="na">name=</span><span class="s">&#39;C2&#39;</span> <span class="na">nativeName=</span><span class="s">&#39;S2&#39;</span> <span class="na">id=</span><span class="s">&#39;C2_27&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;DataItems&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;SPINDLE_SPEED&#39;</span> <span class="na">category=</span><span class="s">&#39;SAMPLE&#39;</span> <span class="na">id=</span><span class="s">&#39;C2_28&#39;</span> <span class="na">name=</span><span class="s">&#39;S2rpm&#39;</span> <span class="na">subType=</span><span class="s">&#39;ACTUAL&#39;</span> <span class="na">units=</span><span class="s">&#39;REVOLUTION/MINUTE&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;REVOLUTION/MINUTE&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;LOAD&#39;</span> <span class="na">category=</span><span class="s">&#39;SAMPLE&#39;</span> <span class="na">id=</span><span class="s">&#39;C2_29&#39;</span> <span class="na">name=</span><span class="s">&#39;S2load&#39;</span> <span class="na">units=</span><span class="s">&#39;PERCENT&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;PERCENT&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;TEMPERATURE&#39;</span> <span class="na">category=</span><span class="s">&#39;SAMPLE&#39;</span> <span class="na">id=</span><span class="s">&#39;C2_30&#39;</span> <span class="na">name=</span><span class="s">&#39;S2temp&#39;</span> <span class="na">units=</span><span class="s">&#39;CELSIUS&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;CELSIUS&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;ROTARY_MODE&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;C2_31&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Constraints&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;Value&gt;</span>SPINDLE<span class="nt">&lt;/Value&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/Constraints&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/DataItem&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;LOAD&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;C2_32&#39;</span> <span class="na">name=</span><span class="s">&#39;S2load_cond&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;TEMPERATURE&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;C2_33&#39;</span> <span class="na">name=</span><span class="s">&#39;S2temp_cond&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/DataItems&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/Rotary&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/Components&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/Axes&gt;</span>
</span><span class='line'>          <span class="nt">&lt;Controller</span> <span class="na">name=</span><span class="s">&#39;controller&#39;</span> <span class="na">id=</span><span class="s">&#39;controller_34&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;DataItems&gt;</span>
</span><span class='line'>              <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;COMMUNICATIONS&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;controller_35&#39;</span> <span class="na">name=</span><span class="s">&#39;comms_cond&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>              <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;LOGIC_PROGRAM&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;controller_36&#39;</span> <span class="na">name=</span><span class="s">&#39;logic_cond&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>              <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;SYSTEM&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;controller_37&#39;</span> <span class="na">name=</span><span class="s">&#39;system_cond&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>              <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;EMERGENCY_STOP&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;controller_38&#39;</span> <span class="na">name=</span><span class="s">&#39;estop&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/DataItems&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Components&gt;</span>
</span><span class='line'>              <span class="nt">&lt;Path</span> <span class="na">name=</span><span class="s">&#39;path&#39;</span> <span class="na">id=</span><span class="s">&#39;path_39&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;DataItems&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;SPINDLE_SPEED&#39;</span> <span class="na">category=</span><span class="s">&#39;SAMPLE&#39;</span> <span class="na">id=</span><span class="s">&#39;path_40&#39;</span> <span class="na">name=</span><span class="s">&#39;Sovr&#39;</span> <span class="na">subType=</span><span class="s">&#39;OVERRIDE&#39;</span> <span class="na">units=</span><span class="s">&#39;PERCENT&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;PERCENT&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;PROGRAM&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_41&#39;</span> <span class="na">name=</span><span class="s">&#39;program&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;PROGRAM&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_42&#39;</span> <span class="na">name=</span><span class="s">&#39;subprogram&#39;</span> <span class="na">subType=</span><span class="s">&#39;x:SUB&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;LINE&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_43&#39;</span> <span class="na">name=</span><span class="s">&#39;line&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;x:UNIT&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_44&#39;</span> <span class="na">name=</span><span class="s">&#39;unitNum&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;x:SEQUENCE_NUMBER&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_45&#39;</span> <span class="na">name=</span><span class="s">&#39;sequenceNum&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;PART_COUNT&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_46&#39;</span> <span class="na">name=</span><span class="s">&#39;PartCountAct&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;PATH_FEEDRATE&#39;</span> <span class="na">category=</span><span class="s">&#39;SAMPLE&#39;</span> <span class="na">id=</span><span class="s">&#39;path_47&#39;</span> <span class="na">name=</span><span class="s">&#39;Fact&#39;</span> <span class="na">subType=</span><span class="s">&#39;ACTUAL&#39;</span> <span class="na">units=</span><span class="s">&#39;MILLIMETER/SECOND&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;FOOT/MINUTE&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;PATH_FEEDRATE&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_48&#39;</span> <span class="na">name=</span><span class="s">&#39;Frapidovr&#39;</span> <span class="na">subType=</span><span class="s">&#39;OVERRIDE&#39;</span> <span class="na">units=</span><span class="s">&#39;PERCENT&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;PERCENT&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;PATH_FEEDRATE&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_49&#39;</span> <span class="na">name=</span><span class="s">&#39;Fovr&#39;</span> <span class="na">subType=</span><span class="s">&#39;OVERRIDE&#39;</span> <span class="na">units=</span><span class="s">&#39;PERCENT&#39;</span> <span class="na">nativeUnits=</span><span class="s">&#39;PERCENT&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;TOOL_ID&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_50&#39;</span> <span class="na">name=</span><span class="s">&#39;Tool_number&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;x:TOOL_GROUP&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_51&#39;</span> <span class="na">name=</span><span class="s">&#39;Tool_group&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;x:TOOL_SUFFIX&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_52&#39;</span> <span class="na">name=</span><span class="s">&#39;Tool_suffix&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;EXECUTION&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_53&#39;</span> <span class="na">name=</span><span class="s">&#39;execution&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;CONTROLLER_MODE&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_54&#39;</span> <span class="na">name=</span><span class="s">&#39;mode&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;x:COMMENT&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_55&#39;</span> <span class="na">name=</span><span class="s">&#39;program_cmt&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;x:COMMENT&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_56&#39;</span> <span class="na">name=</span><span class="s">&#39;subprogram_cmt&#39;</span> <span class="na">subType=</span><span class="s">&#39;x:SUB&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;x:DURATION&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_57&#39;</span> <span class="na">name=</span><span class="s">&#39;auto_time&#39;</span> <span class="na">subType=</span><span class="s">&#39;x:AUTO&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;x:DURATION&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_58&#39;</span> <span class="na">name=</span><span class="s">&#39;total_time&#39;</span> <span class="na">subType=</span><span class="s">&#39;x:TOTAL&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;x:DURATION&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_59&#39;</span> <span class="na">name=</span><span class="s">&#39;cut_time&#39;</span> <span class="na">subType=</span><span class="s">&#39;x:CUT&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;MOTION_PROGRAM&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;path_60&#39;</span> <span class="na">name=</span><span class="s">&#39;motion_cond&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;SYSTEM&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;path_61&#39;</span> <span class="na">name=</span><span class="s">&#39;path_system&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;x:PALLET_NUM&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;path_62&#39;</span> <span class="na">name=</span><span class="s">&#39;pallet_num&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/DataItems&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/Path&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/Components&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/Controller&gt;</span>
</span><span class='line'>          <span class="nt">&lt;Systems</span> <span class="na">name=</span><span class="s">&#39;systems&#39;</span> <span class="na">id=</span><span class="s">&#39;systems_63&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Components&gt;</span>
</span><span class='line'>              <span class="nt">&lt;Electric</span> <span class="na">name=</span><span class="s">&#39;electric&#39;</span> <span class="na">id=</span><span class="s">&#39;electric_64&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;DataItems&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;POWER_STATE&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;electric_65&#39;</span> <span class="na">name=</span><span class="s">&#39;power&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;TEMPERATURE&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;electric_66&#39;</span> <span class="na">name=</span><span class="s">&#39;electric_temp&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/DataItems&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/Electric&gt;</span>
</span><span class='line'>              <span class="nt">&lt;Hydraulic</span> <span class="na">name=</span><span class="s">&#39;hydraulic&#39;</span> <span class="na">id=</span><span class="s">&#39;hydraulic_67&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;DataItems&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;PRESSURE&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;hydraulic_68&#39;</span> <span class="na">name=</span><span class="s">&#39;hydra_cond&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/DataItems&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/Hydraulic&gt;</span>
</span><span class='line'>              <span class="nt">&lt;Coolant</span> <span class="na">name=</span><span class="s">&#39;coolant&#39;</span> <span class="na">id=</span><span class="s">&#39;coolant_69&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;DataItems&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;PRESSURE&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;coolant_70&#39;</span> <span class="na">name=</span><span class="s">&#39;coolant_pres&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;TEMPERATURE&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;coolant_71&#39;</span> <span class="na">name=</span><span class="s">&#39;coolant_temp&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;LEVEL&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;coolant_72&#39;</span> <span class="na">name=</span><span class="s">&#39;coolant_level&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/DataItems&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/Coolant&gt;</span>
</span><span class='line'>              <span class="nt">&lt;Pneumatic</span> <span class="na">name=</span><span class="s">&#39;pneumatic&#39;</span> <span class="na">id=</span><span class="s">&#39;pneumatic_73&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;DataItems&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;PRESSURE&#39;</span> <span class="na">category=</span><span class="s">&#39;CONDITION&#39;</span> <span class="na">id=</span><span class="s">&#39;pneumatic_74&#39;</span> <span class="na">name=</span><span class="s">&#39;pneu_cond&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/DataItems&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/Pneumatic&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/Components&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/Systems&gt;</span>
</span><span class='line'>          <span class="nt">&lt;Interfaces</span> <span class="na">name=</span><span class="s">&#39;interfaces&#39;</span> <span class="na">id=</span><span class="s">&#39;interfaces_75&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Components&gt;</span>
</span><span class='line'>              <span class="nt">&lt;MaterialLoader</span> <span class="na">name=</span><span class="s">&#39;material_loader&#39;</span> <span class="na">id=</span><span class="s">&#39;material_loader_76&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;DataItems&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;MATERIAL_LOAD&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;material_loader_77&#39;</span> <span class="na">name=</span><span class="s">&#39;material_load&#39;</span> <span class="na">subType=</span><span class="s">&#39;REQUEST&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;MATERIAL_UNLOAD&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;material_loader_78&#39;</span> <span class="na">name=</span><span class="s">&#39;material_unload&#39;</span> <span class="na">subType=</span><span class="s">&#39;REQUEST&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;LINK_STATE&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;material_loader_79&#39;</span> <span class="na">name=</span><span class="s">&#39;robo_link&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/DataItems&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/MaterialLoader&gt;</span>
</span><span class='line'>              <span class="nt">&lt;ChuckInterface</span> <span class="na">name=</span><span class="s">&#39;chuck_interface&#39;</span> <span class="na">id=</span><span class="s">&#39;chuck_interface_80&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;DataItems&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;OPEN_CHUCK&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;chuck_interface_81&#39;</span> <span class="na">name=</span><span class="s">&#39;open_chuck&#39;</span> <span class="na">subType=</span><span class="s">&#39;RESPONSE&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;CLOSE_CHUCK&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;chuck_interface_82&#39;</span> <span class="na">name=</span><span class="s">&#39;close_chuck&#39;</span> <span class="na">subType=</span><span class="s">&#39;RESPONSE&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/DataItems&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/ChuckInterface&gt;</span>
</span><span class='line'>              <span class="nt">&lt;DoorInterface</span> <span class="na">name=</span><span class="s">&#39;door_interface&#39;</span> <span class="na">id=</span><span class="s">&#39;door_interface_83&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;DataItems&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;OPEN_DOOR&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;door_interface_84&#39;</span> <span class="na">name=</span><span class="s">&#39;open_door&#39;</span> <span class="na">subType=</span><span class="s">&#39;RESPONSE&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;CLOSE_DOOR&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;door_interface_85&#39;</span> <span class="na">name=</span><span class="s">&#39;close_door&#39;</span> <span class="na">subType=</span><span class="s">&#39;RESPONSE&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/DataItems&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/DoorInterface&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/Components&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/Interfaces&gt;</span>
</span><span class='line'>          <span class="nt">&lt;Door</span> <span class="na">name=</span><span class="s">&#39;door&#39;</span> <span class="na">id=</span><span class="s">&#39;door_86&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;DataItems&gt;</span>
</span><span class='line'>              <span class="nt">&lt;DataItem</span> <span class="na">type=</span><span class="s">&#39;DOOR_STATE&#39;</span> <span class="na">category=</span><span class="s">&#39;EVENT&#39;</span> <span class="na">id=</span><span class="s">&#39;door_87&#39;</span> <span class="na">name=</span><span class="s">&#39;door_state&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/DataItems&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/Door&gt;</span>
</span><span class='line'>          <span class="nt">&lt;Stock</span> <span class="na">name=</span><span class="s">&quot;stock&quot;</span> <span class="na">id=</span><span class="s">&quot;stock&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;DataItems&gt;</span>
</span><span class='line'>              <span class="nt">&lt;DataItem</span> <span class="na">category=</span><span class="s">&quot;EVENT&quot;</span> <span class="na">id=</span><span class="s">&quot;material&quot;</span> <span class="na">name=</span><span class="s">&quot;material&quot;</span> <span class="na">type=</span><span class="s">&quot;MATERIAL&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/DataItems&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/Stock&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Components&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/Device&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Devices&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/MTConnectDevices&gt;</span>
</span></code></pre></td></tr></table></div></figure></div></notextile></p>
<h3>Future Enhancements</h3>
<p>The most significant future enhancement to the standard and the
messaging semantics will be the addition of multiple devices and a
many-to-many relationship between machine tools, <span class="caps">CMMS</span>, gauges, and
multiple fixed or mobile robots. This can be achieved using an
extension to the standard to allow for interface bindings.</p>
<p>We are proposing a lazy locking scheme where we provide a new data
item within each interface that allows the devices to “pair” for the
duration of the operation. For example, during the material load
operation, the machine tool and the robot will each have a data item,
for the sake of discussion, we can call it Binding that will have the
following values: <code>UNAVAILABLE</code>, <code>AVAILABLE</code>, or &lt;device-id&gt;. If it is
<code>AVAILABLE</code> then it can be bound to a device that is capable of
fulfilling the request. Once bound it will change to the device Id of
the associated device.</p>
<p>The mechanism will resolve disputes by allowing the requestor to
choose the responder from the available devices that are
volunteering. So, if a machine tool wants material loaded and the cell
has multiple Robots capable of loading material, multiple Robots may
try to bind to the request, but only one will be accepted. The
sequence will be as follows:</p>
<ol>
	<li>Cnc 1 material loader binding <code>AVAILABLE</code></li>
	<li>Cnc 1 material loader <code>MaterialLoad</code> <code>ACTIVE</code></li>
	<li>Robot 1 material loader binding Cnc 1</li>
	<li>Robot 2 material loader binding Cnc 1</li>
	<li>Cnc 1 material loader binding Robot 2</li>
	<li>Robot 1 material loader binding <code>AVAILABLE</code></li>
	<li>Robot 2 material loader <code>MaterialLoad</code> <code>ACTIVE</code></li>
	<li>Robot 2 material loader <code>MaterialLoad</code> <code>COMPLETE</code></li>
	<li>Cnc 1 material loader <code>MaterialLoad</code> <code>READY</code></li>
	<li>Robot 2 material loader <code>MaterialLoad</code> <code>READY</code></li>
	<li>Cnc 1 material loader binding <code>AVAILABLE</code></li>
	<li>Robot 2 material loader binding <code>AVAILABLE</code></li>
</ol>
<p>In this way the robot and the cnc will coordinate the associations and
temporary bindings between devices. The requestor selection is easiest
way to resolve the possible locking issues between multiple devices
and still have a complete read-only interface. The failure scenarios
remain mainly the same with some bind timeout issues that will need to
be resolved.</p>
<p>This is a very high level conceptual model and will require full
design, architecture, and testing as the previous interface went
through. This same architecture should would with both mobile and
stationary devices (though that will need to be explored as well.) The
scheme borrows from optimistic locking mechanisms in databases and
other technologies for distributed resource sharing.</p>
<p>Additional device models and interactions will also be required if
devices other than <span class="caps">CNC</span> machine tools are involved in these extensions
as well. This architecture will be well suited for an electronic
manufacture floor with full automation and device monitoring as well
as resource management.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing the vrtk package]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2013/06/05/introducing-the-vrtk-package/"/>
    <updated>2013-06-05T08:29:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2013/06/05/introducing-the-vrtk-package</id>
    <content type="html"><![CDATA[<p>As part of my internship project here at System Insights, Chennai, I&rsquo;ve been involved in developing an R-package called the &lsquo;vrtk&rsquo;, essentially a set of tools for reading and working with data from the vimana platform.</p>

<p>&lsquo;vrtk&rsquo; is short for <em>&lsquo;vimana Research ToolKit&rsquo;</em> or <em>&lsquo;vimana R ToolKit&rsquo;</em>. It is intended to be an open-source set of the basic tools needed to read and work with data.</p>

<p>The library is very simple to use. Visit <a href="https://www.github.com/systeminsights/vrtk">the github page</a> for the download links, the source code, and to find the example files.</p>

<h2>An Example</h2>

<p>The rest of this post will be a simple demonstration &mdash; a rudimentary look at path-feedrate data from a generic machine tool.</p>

<p>The full example script can be found at <a href="https://www.github.com/systeminsights/vrtk/tree/master/example">this link</a>, and it doubles as a tutorial. This post provides just a concise overview.</p>

<h4>Installation and Loading:</h4>

<p>Follow the instructions on the <a href="https://www.github.com/systeminsights/vrtk">same github page</a> to download and install the package. Next, open the <code>example.R</code> script, and follow along with the R-console.</p>

<p>The example file sets up a demo dataset, which has feedrate data and tool position data from a generic machine tool, monitored for around 30 minutes.</p>

<h4>Reading the Data:</h4>

<p>We use some of the core vrtk functions: <code>createDeviceGroupfromGhetto</code>, <code>summary</code>, <code>getDevice</code>, <code>getData</code> and <code>merge</code> to get the data into the right form.</p>

<p>Use the <code>createDeviceGroupfromGhetto</code> method to initialize a device group. Let&rsquo;s call it <code>devGrp</code>.</p>

<pre><code>devGrp &lt;- createDeviceGroupfromGhetto("./402.json",data_folderpath="./402",createRData=TRUE)
</code></pre>

<p>Now, we can store the device itself in a variable.</p>

<pre><code>dev &lt;- getDevice(devGrp)
</code></pre>

<p>The <code>vimana::summary</code> function provides a quick summary of the information present.</p>

<pre><code>summary(devGrp)
summary(dev)
</code></pre>

<p>The summary tells us that the json is associated with a total of 1 device, with 11 DataItems associated.</p>

<p>A DataItem is vrtk&rsquo;s representation of the type of data measured. Examples &mdash; <code>Xload</code>, <code>Yload</code>, <code>Zload</code>, <code>path_feedrate</code>, <code>Xact</code> etc.</p>

<p>The vimana::merge function merges the DataItems we want, and reads them into a dataframe with the appropriate timestamps.</p>

<p>For this example, we want the pathfeedrate data and the position data. So we use merge as follows:</p>

<pre><code>allDataFrame &lt;- merge(dev,"FEEDRATE-ACTUAL|POS")
</code></pre>

<p>After some column-renaming, the data is in a data.frame and ready for use. We can plot the pathfeedrate data with the following command. The resultant plot is shown below.</p>

<pre><code>plot(allDataFrame$timestamp,allDataFrame$reported.path.feedrate,type="s")
</code></pre>

<p><img src="http://www.manufacturingbigdata.com/images/2013-06-05-pathfeedrateplot.png" alt="path.feedrate-plot" /></p>

<h4>The Example Analysis</h4>

<p>For now, we&rsquo;ll simply compute a feedrate from the position data and see how and when it differs from the pathFeedrate data from the same machine during the same duration.</p>

<p>First, we need the distance travelled based on the given position data. Here is a small function to compute it:</p>

<pre><code>dist &lt;- function(xVec,yVec,zVec) { 
  # Euclidean dist
  xDiff = diff(xVec)
  yDiff = diff(yVec)
  zDiff = diff(zVec)
  return(c(NA,sqrt(xDiff^2 + yDiff^2 + zDiff^2)))
}
allDataFrame$prev.dist &lt;- dist(allDataFrame$xPos,allDataFrame$yPos,allDataFrame$zPos)
</code></pre>

<p>Now we just need to compute the distances, and divide by the time difference to get the computed feedrate:</p>

<pre><code>timeDifsVector &lt;- c(NA,diff(allDataFrame$timestamp))
allDataFrame$computed.path.feedrate &lt;- allDataFrame$prev.dist/timeDifsVector
</code></pre>

<p>Now, compute the Pearson correlation coefficient between the reported PathFeedrate and the calculated PathFeedrate from the position data:</p>

<pre><code>cor(allDataFrame$reported.path.feedrate,allDataFrame$computed.path.feedrate,use="na.or.complete")
</code></pre>

<p>This yields a value of ~0.78, which is decent but not as high as expected. What would account for the difference, though?</p>

<p>Let&rsquo;s conclude this example by looking at the difference between the reported and computed feedrates. While the difference does not mean anything in physical terms, it provides a clear picture of where the reported feedrate is differing from the computed one.</p>

<pre><code>difference &lt;- allDataFrame$reported.path.feedrate - allDataFrame$computed.path.feedrate
plot(difference,type="s")
</code></pre>

<p><img src="http://www.manufacturingbigdata.com/images/2013-06-05-diffsplot.png" alt="diffs-plot" /></p>

<p>The difference seems to spike deterministically. We surmise that the spikes correspond to tool changes. This can actually be checked &mdash; we just need to check the toolID data, if its available.</p>

<p>For now, we&rsquo;ll conclude this example by taking a much smaller sampling period, where there aren&rsquo;t any spikes, and check the correlation.</p>

<pre><code>sample.reported &lt;- allDataFrame$reported.path.feedrate[675:740]
sample.computed &lt;- allDataFrame$computed.path.feedrate[675:740]
plot(sample.reported,type="s",ylim=c(-500,2000))
lines(sample.computed,type="s",col="red")
cor(sample.computed,sample.reported)
</code></pre>

<p><img src="http://www.manufacturingbigdata.com/images/2013-06-05-closeupplot.png" alt="closeup-plot" /></p>

<p>97% in the regions between spikes &mdash; not too shabby!</p>

<p>We see several interesting things happening here:
* In regions between spikes, the reported and computed feedrates correlate well.
* While the reported feedrate maintains a particular plateau value for a while, the computed feedrate shows minor fluctuations. Interestingly, using the same position data as in this example, it is possible to see that feedrate fluctuates (usually, the reported is higher), just before the tool takes a sharp turn.
* Also, when there&rsquo;s a change in the plateau value, the computed feedrate always lags for a datapoint or two before reaching the reported value, as one would expect from a real world machine.</p>

<p>That&rsquo;s about it, I suppose! This concludes our trivial example using the vrtk package. Be sure to check out the github page and the documentation for further details and the source-code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We Are Hiring!]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2013/06/03/we-are-hiring/"/>
    <updated>2013-06-03T06:00:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2013/06/03/we-are-hiring</id>
    <content type="html"><![CDATA[<p>At System Insights, we build <a href="http://systeminsights.com/vimana/">vimana</a>, the world&rsquo;s most advanced platform for manufacturing data analytics. We are a small, fast-growing company with 15 employees globally and we are looking to grow our R&amp;D center in Chennai, India. We are currently hiring for the following positions in Chennai:</p>

<p><strong>Manufacturing Engineer</strong></p>

<p>You will be responsible for leading the deployment of vimana at customer facilities around the world, and working with our users to deliver vimana&rsquo;s value.</p>

<ul>
<li>B.E/B.Tech from reputed a college/university, preferably in Mechanical Engineering (or equivalent) with strong academics</li>
<li>2~3 Years experience</li>
<li>Hands-on shopfloor experience with Production/Process Engineering, New Product Development, Industrial Engineering, Manufacturing Systems</li>
<li>Experience/familiarity with Value Stream Mapping, 6 Sigma, TPM etc., a plus</li>
<li>Excellent communication skills</li>
</ul>


<p><strong>SW Developer</strong></p>

<p>You will be responsible for developing the cutting-edge software technologies that power vimana. You will be working closely with our development team based in Berkeley, California.</p>

<ul>
<li>Strong experience in Ruby, AJAX, Java Script, HTML/CSS (at least 2 years)</li>
<li>Experience with Web 2.0 development, Object Oriented Design and MVC Frameworks</li>
<li>Experience with SQL and noSQL technologies</li>
<li>Knowledge of HTML5, Git</li>
<li>Experience in using testing frameworks and unit tests</li>
<li>Excellent communication skills</li>
</ul>


<p><strong>Dev-Ops Lead</strong></p>

<p>You will be responsible for monitoring, managing, and maintaining the vimana platform for SaaS and on-site deployments. You will be responsible for building and growing a team of System Administrators and DevOps Engineers to maintain the vimana platform. You will be working closely with our development team based in Berkeley, California.</p>

<ul>
<li>Strong experience in deploying, configuring and managing applications using Amazon AWS (EC2, S3, RDS, EMR &hellip;)</li>
<li>Skills in mongodb and SQL: Replication, sharding, tuning</li>
<li>Experience with Chef or other configuration management tool</li>
<li>Basic understanding of network topologies and configuration (routing, subnets, NAT).</li>
<li>Experience in application monitoring and log file management for multi-function, multi-tenant applications</li>
<li>System administration skills for Linux (Ubuntu, Centos) and Windows</li>
<li>Lead and work with a 24x7 distributed global team</li>
</ul>


<p><strong>R&amp;D Engineer</strong></p>

<p>You will join our R&amp;D team to develop next-generation technology for manufacturing data analytics, this includes: data analytics, software development, and hardware engineering.</p>

<ul>
<li>Fresher/recent graduate with strong academics</li>
<li>Experience with technical programming languages like Matlab or R</li>
<li>Good project experience</li>
<li>Excellent communication skills</li>
</ul>


<p>If you are interested, please fill out <a href="http://systeminsights.wufoo.com/forms/z7x4m1/">this application</a> (don&rsquo;t forget to attach your resume!).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Top Manufacturing Energy Consumers: A Close Look at the Paper Industry]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2013/05/30/energy-consumption-in-manufacturing/"/>
    <updated>2013-05-30T12:00:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2013/05/30/energy-consumption-in-manufacturing</id>
    <content type="html"><![CDATA[<p><a href="http://www.linkedin.com/pub/jes%C3%BAs-nieto-gonz%C3%A1lez/30/a92/943/">Jesus Nieto Gonzalez</a> from the UC Berkeley Haas School of Business Class of 2014 worked with us on a research project to identify the top energy consumers in the manufacturing sector. Here are some of his findings:</p>

<ul>
<li>The top five energy-intensive industries are Paper, Petroleum and Coal products, Nonmetallic Mineral Products, Chemicals, and Primary Metals (measured based on BTU/$ output)</li>
<li>The paper industry has the highest electricity consumption as well, followed by Primary Metals and Textile Mills (measured based on kWH/$)</li>
<li>The EU countries (particularly Italy and Germany) have some of the highest electricity costs for Industrial consumers, followed by the BRIC countries and the US</li>
<li>The paper industry offers a lot of opportunities for energy efficiency and electrical energy reduction. The industry is highly fragmented and the major paper producers are concentrated in parts of the world with high electricity costs.</li>
</ul>


<p>The entire report is available <a href="https://s3.amazonaws.com/manufacturingbigdata-blog-static/pdfs/jesus-nieto-energy-consumption.pdf">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chennai.rb Meetup]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2013/04/01/chennai-ruby-meetup/"/>
    <updated>2013-04-01T14:45:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2013/04/01/chennai-ruby-meetup</id>
    <content type="html"><![CDATA[<p>We will be hosting the next chennai.rb meetup on the 6th of April in our <a href="http://systeminsights.com/locations">Chennai office</a>. The talks include:</p>

<ul>
<li>Hadooping with Ruby</li>
<li>Large Scale Web Apps with Ruby</li>
</ul>


<p>We will be posting more details shortly &mdash; watch this space!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Green Manufacturing Book]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2013/04/01/green-manufacturing-book/"/>
    <updated>2013-04-01T11:15:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2013/04/01/green-manufacturing-book</id>
    <content type="html"><![CDATA[<p>Had questions about Green Manufacturing but were too bashful to ask? You are in luck, you can pick up a copy of the excellent &ldquo;Green Manufacturing: Fundamentals and Applications&rdquo; from <a href="http://www.amazon.com/Green-Manufacturing-Fundamentals-Applications-Technology/dp/1441960155/">Amazon.com</a> and other fashionable purveyors of fine reading material. Full Disclosure: I have co-authored 4 chapters in the book, including the penultimate chapter &ldquo;Enabling Technologies for Assuring Green Manufacturing&rdquo;, which, among other things, talks  about the need for a highly scalable software architecture to enable realtime monitoring and reporting of manufacturing performance (hint: we have a built a little <a href="http://www.systeminsights.com/vimana">product</a> to address that need).</p>

<p>&ldquo;Green Manufacturing&rdquo; is based on research from the <a href="http://lmas.berkeley.edu">Laboratory for Manufacturing and Sustainability</a> and is edited by Prof. David Dornfeld, the Director of LMAS and the Chairman of the Department of Mechanical Engineering at UC Berkeley. For more information, you can check out his excellent <a href="http://green-manufacturing.blogspot.com">blog</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaOne Presentation]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2013/01/08/javaone-presentation/"/>
    <updated>2013-01-08T09:28:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2013/01/08/javaone-presentation</id>
    <content type="html"><![CDATA[<p>We presented at <a href="http://www.oracle.com/javaone/index.html">JavaOne</a> in early October 2012 in San Francisco on applying Embedded technologies in enabling Manufacturing Big Data. Here are our slides.</p>

<script async class="speakerdeck-embed" data-id="50726683b1808300020091bb" data-ratio="1.7444633730834753" src="http://www.manufacturingbigdata.com//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Precision Manufacturing Lecture Videos]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2013/01/08/precision-manufacturing/"/>
    <updated>2013-01-08T09:00:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2013/01/08/precision-manufacturing</id>
    <content type="html"><![CDATA[<p>I am back to my regular blogging duties after a hiatus of a few months.</p>

<p>Part of the reason I was away was because I was teaching the graduate course &ldquo;Precision Manufacturing&rdquo; at UC Berkeley in the Department of Mechanical Engineering.</p>

<p>Thanks to the webcast facilities at Cal, videos of all of the classroom lectures are available on Youtube <a href="http://www.youtube.com/watch?v=vqxpT3GBB8U&amp;list=PLbCV7-4PxKsQJ7VtY13oipOEDrCVXdkhy">here</a>. If you have any questions or feedback, please leave it in the comments!</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/vqxpT3GBB8U?list=PLbCV7-4PxKsQJ7VtY13oipOEDrCVXdkhy" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oracle Partnership at IMTS]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2012/09/04/imts-oracle-partnership/"/>
    <updated>2012-09-04T09:53:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2012/09/04/imts-oracle-partnership</id>
    <content type="html"><![CDATA[<p>We are very happy to announce that we will be partnering with <a href="http://www.oracle.com">Oracle</a> during <a href="http://www.imts.com/">IMTS</a> to showcase integrated solutions for manufacturing data interoperability, collection, and analysis. We will be discussing the use of Java SE Embedded in building a ubiquitous embedded platform for collecting data from the shopfloor. <a href="http://www.oracle.com/technetwork/java/embedded/overview/javase/index.html">Java SE Embedded</a> has been used in products across a diverse spectrum of industries, ranging from RFID readers to parking meters to ATMs to in-flight video systems to POS terminals to wearable systems. This makes it a great fit in the manufacturing world, where we need hardware devices that can seamlessly and ubiquitously integrate data across the shop floor.</p>

<p>Java SE Embedded will be applied in developing a hardware platform that can collect data across proprietary interfaces in the shopfloor, perform basic analysis, and then stream it in the MTConnect standard. Selecting MTConnect was a no-brainer – it is widely supported by the industry, it is lightweight and easy to implement, and gives us a lot of flexibility in deployment. MTConnect is also natively supported by our <a href="http://www.systeminsights.com">vimana</a> platform for manufacturing big data analysis, and MTConnect allows us to quickly integrate the factory data feeds for further analysis and reporting using vimana.</p>

<p>We are very excited about our partnership with Oracle, and will be talking more about it at IMTS. You can catch us Booth N-6995 with Oracle, between September 10th and 15th, at McCormick Place, Chicago.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process Traceability and Big Data]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2012/08/31/traceability/"/>
    <updated>2012-08-31T22:47:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2012/08/31/traceability</id>
    <content type="html"><![CDATA[<p>In a previous post we looked at the different things we can do with Big Data. Lets examine one of the applications in more detail: Process Traceability.</p>

<p>Process Traceability can be understood as being able to trace every process that happened to a part as it got manufactured. Its important to make a distinction here between <em>Part</em> Traceability and <em>Process</em> Traceability. Part Traceability primarily deals with what part was manufactured, and when. Process Traceability, on the other hand, builds on this information, and expands it greatly to understand exactly how the part was manufactured. Process Traceability is a key requirement in Aerospace manufacturing since manufacturing defects can have severe impacts on the quality of parts, and with capable Process Traceability systems we can go back in time and find out exactly how and when the manufacturing defect was introduced into the part. Of course, Process Traceability has applications in other quality-critical domins as well including medical devices and engine components.</p>

<p>Currently, most companies only have Part Traceability systems (if any) &mdash; they know when which part was manufactured. When automated, this type of data is collected by MES or ERP systems, and with the right kind of aggregation and rollups, the data can reveal when a particular batch of parts was manufatured and what was the heat number (or lot number) of the castings/forgings that went into it. But this is not enough to fully understand what happened when a part was made. To build a full-fledged Process Traceability system, lets see what kind of data we can collect from the shopfloor:</p>

<ul>
<li><strong>Identity</strong> data is the most basic kind required for part traceability. This data tells us what is being made, how much was made, and when was it made. <em>Examples: Heat ID, Batch ID, Operator ID.</em></li>
<li><strong>Operational</strong> data can tell us what the machine was doing when it had a part associated with it. We can understand the utilization of a device when it was operating on a part, how long the device was in &ldquo;auto&rdquo; mode versus &ldquo;manual&rdquo; mode, and the different downtimes that device experienced when it was working on the part. Knowing the downtimes, for instance, can indicate potential issues with part quality. For example, if a device had repeated unplanned maintenance downtimes when it had a part on it, its quite likely that the part has some quality problems as well, and might require additional metrology. <em>Examples: Device uptime, downtime, modes, states.</em></li>
<li><strong>Diagnostic</strong> data can further embellish the correlations that we can get started with using Operational data. Alarm and condition data can reveal specific issues in the device that is manufaturing a part. <em>Examples: Alarms, warnings, messages, notifications.</em></li>
<li><strong>Process</strong> data can help us get into a lot more detail, and can reveal how specific features were generated on the part. For example, in high speed machining of aerospace alloys, its very important to preserve a specific chip velocity when features are being created. But interpolation errors and machine tool limitations can result in significant variations between the actual feedrate and the planned feedrate. With process data, we can precisely know when these deviations happened, and can use it in understanding its impact. <em>Examples: Positions, velocities, acceleration, flow rates.</em></li>
<li><strong>Environmental</strong> data can tell us the impact of the part as its being manufactured. With detailed knowledge of the resource flows associated with  the part, we can estimate its environmental impact. A high level of detail can also reveal which stages of the production process have the greatest impact, and that knowledge can help in targeting energy efficiency improvements. <em>Examples: Resource usage, energy consumption, effluents and emissions.</em></li>
</ul>


<p>The bigger challenge, is to be able to intelligently and efficiently operate on this massive set of data, and find pertinent information associated with a part. And here we can broadly look at three kinds of queries:</p>

<ul>
<li><strong>Part Search</strong>: Here we are trying to find all the information associated with a specific part (or family of parts). We start with some identifying characteristic for the part (or the family of parts). This can be a Part ID, a Heat ID, or even the day the part was manufactured. We can also identify parts based on other events, like the first part manufactured after a power outage. Information associated with a part can include all of the five kinds discussed above.</li>
<li><strong>Similarity Search</strong>: Here we are trying to find similar parts based on one or more specific parts that have been identified. The idea here is that we have flagged a certain part or set of parts, and we want to scan our historical system and find other parts that share a similar process history. This is very useful when parts are being quarantined after a quality spill and we are trying to find all the other parts that need to be quarantined. If we know the ID of one part, then we can find other parts similar to it based on a variety of criteria, including: heat code, operator who made the defective part, machine condition, and alarm sequence during manufacture.</li>
<li><strong>&ldquo;Black Swan&rdquo; Search</strong>: This is perhaps the most interesting application of a Process Traceability system, and it looks at identifying &ldquo;black swans&rdquo;, or the rare events that are anomalous to the norm. These queries will attempt to find parts that have been manufactured differently from the rest (starkly or subtly). These could reveal potential problems in the production process before it is identified by the customer. Examples include: excessive spindle loads, erratic feedrate override, and anomalous energy consumption during machining.</li>
</ul>


<p>Now, in order to bring this level of Process Traceability to the manufacturing shopfloor we need software that is capable of handling massive amount of shopfloor data and operating on it to enable the kind of querying and decision making discussed here. Our vimana manufacturing big data platform does just that. You can learn more about it <a href="http://www.systeminsights.com/vimana">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IMTS 2012]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2012/08/22/updates-and-imts/"/>
    <updated>2012-08-22T13:54:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2012/08/22/updates-and-imts</id>
    <content type="html"><![CDATA[<p>We are back after a brief hiatus. The last few weeks have been eventful, to say the least, as we get ready for <a href="http://www.imts.com">IMTS 2012</a> in Chicago between September 10th and 15th. At IMTS we will be showcasing the <strong>vimana</strong> software platform for manufacturing productivity improvement and the <strong>ConnectOne</strong> hardware platform for MTConnect-based data acquisition and interoperability.</p>

<p>Catch us at S-8300 with <a href="http://www.imts.com/visitor/exdir/exhibitor_details.cfm?exhid=00000021">Mazak</a> and at N-6995 with <a href="http://www.imts.com/visitor/exdir/exhibitor_details.cfm?exhid=00062662&amp;CFID=11122638&amp;CFTOKEN=40146151">Oracle</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Energy Regulations in Tamil Nadu, India]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2012/07/10/tneb-regulations/"/>
    <updated>2012-07-10T11:00:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2012/07/10/tneb-regulations</id>
    <content type="html"><![CDATA[<p>Industrial energy consumers in Tamil Nadu, India have seen a sharp increase in energy costs beginning from April 2012. In this post we look at the revised tariff of the Tamil Nadu Electricity Board (TNEB), and examine its impact on the overall energy costs for a manufacturing plant.</p>

<h2>The Tariff</h2>

<p>The revised Tariff for Industrial Consumers (HT1A) is as follows (available <a href="http://tnerc.tn.nic.in/orders/Tariff%20Order%202009/2012/T.O%20No.%201%20of%202012%20dated%2030-03-2012.pdf">here</a>):</p>

<h3>Basic Charges</h3>

<ul>
<li>Demand Charges &mdash; INR 300 / kVA / month</li>
<li>Energy Charges &mdash; INR 5.50 / kWh</li>
</ul>


<h3>Restrictions and Surchages</h3>

<h4>Power Factor:</h4>

<ul>
<li>Power Factor => 0.9 &mdash; No Surcharge</li>
<li>0.9 > Power Factor => 0.85    &mdash; 1% of Current Consumption Charges for every 0.01 reduction in PF from 0.9</li>
<li>0.85 > Power Factor => 0.75 &mdash; 1.5% of Current Consumption Charges for every 0.01 reduction in PF from 0.9</li>
<li>Power Factor &lt; 0.75 &mdash; 2% of Current Consumption Charges for every 0.01 reduction in PF from 0.9</li>
</ul>


<h4>Billable Demand:</h4>

<ul>
<li>Demand Charges will levied on Maximum Demand that has actually been registered for the month or 90% of the Sanctioned Demand, whichever is higher.</li>
</ul>


<h4>Peak Hour:</h4>

<ul>
<li>HT Industrial Consumers will be billed 20% extra on the Energy Charges for the Energy recorded during the Peak hours</li>
<li>Duration of Peak hours will be 6:00am to 9:00am &amp; 6:00pm to 9:00pm</li>
</ul>


<h4>Night Hour:</h4>

<ul>
<li>HT Industrial Consumers will get a reduction of 5% on the Energy Charges for the Energy recorded during the Night hours</li>
<li>Duration of Night hour will be 10:00pm to 5:00am</li>
</ul>


<h4>Demand Integration Period:</h4>

<ul>
<li>Maximum Demand Integration period will be 15minutes</li>
</ul>


<h4>Harmonics:</h4>

<ul>
<li>Total Voltage Harmonic Distortion should not exceed 5%</li>
<li>Total Current Harmonic Distortion should not exceed 8%</li>
<li>If the harmonics level are not within the limits, then the consumer has to pay 15% of respective tariff as Compensation</li>
</ul>


<h2>Power Scenario in the State</h2>

<p>The state of Tamil Nadu has installed capacity of 10,364.5 MW and the average power availability is about 8500 MW. The demand ranges from 11,500 MW to 12,500 MW which gives a clear indication that the state has a shortage about 3000 to 4000 MW of power. Moreover if we see the growth of consumers, it keeps increasing at a rate of 5% every year. Because of this gap between demand and supply, TNEB has taken the following mitigation measures:</p>

<ul>
<li>40% cut on demand and energy for High Tension Industrial and Commercial Services</li>
<li>Load shedding of 2 hrs in Chennai and its suburbs</li>
<li>Load shedding of 4 hrs in other urban and rural areas</li>
<li>10% of power supply during Peak hours for Industrial and Commercial Services</li>
<li>Power Holiday for all HT &amp; LT consumers</li>
</ul>


<p>These restrictions can be relaxed based on the power availability. However, HT consumers are allowed to make power purchase to inter- and intra-state Open Access providers where cheaper power may be available.</p>

<h2>So&hellip; What&rsquo;s the Impact?</h2>

<p>Lets examine how these revised prices impact an average manufacturing plant.</p>

<p>Lets consider a Manufacturing Facility, with the following cost structure:</p>

<ul>
<li>Permitted Demand: 1000 kVA</li>
<li>Permitted Energy Quota: 300,000 kWh</li>
</ul>


<p>Based on this structure, lets assume that the energy consumed and the costs incurred during a representative month is as follows:</p>

<iframe width='410' height='500' frameborder='0' src='https://docs.google.com/spreadsheet/pub?key=0AjFwRioMlxbbdEptNTRoLVdtQUpsa1pIMW9NSXl5S1E&single=true&gid=0&output=html&widget=true'></iframe>


<p>Lets see how costs change with the new pricing under different scenarios:</p>

<h3>Case 1: Grid Only</h3>

<p>The revised grid costs are Rs. 5.50/kWh and the plant faces a 40% reduction on its demand and energy limits. The revised permitted demand is 600 kVA and the permitted energy is 180,000 kWH. The plant is penalized at twice the price for exceeding the energy or demand limits.</p>

<iframe width='410' height='600' frameborder='0' src='https://docs.google.com/spreadsheet/pub?key=0AjFwRioMlxbbdEptNTRoLVdtQUpsa1pIMW9NSXl5S1E&single=true&gid=1&output=html&widget=true'></iframe>


<p>If the plant is purely dependent on the grid (EB), then monthly energy costs grow by more than 120% (more than doubles!!!).</p>

<h3>Case 2: Grid and Diesel</h3>

<p>If the plant offsets 500 kVA of demand and 130,000 kWh of energy by running a diesel generator, which costs Rs. 15/kWh:</p>

<iframe width='410' height='650' frameborder='0' src='https://docs.google.com/spreadsheet/pub?key=0AjFwRioMlxbbdEptNTRoLVdtQUpsa1pIMW9NSXl5S1E&single=true&gid=2&output=html&widget=true'></iframe>


<p>Even with using an auxilliary Diesel Generator to supplement grid energy, the plant spends 82% more on energy.</p>

<h3>Case 3: Grid and Power Purchase</h3>

<p>The plant purchases 130,000 kWh at Rs. 8/kWh, and gets a equivalent deemed demand of 260 kVA:</p>

<iframe width='410' height='700' frameborder='0' src='https://docs.google.com/spreadsheet/pub?key=0AjFwRioMlxbbdEptNTRoLVdtQUpsa1pIMW9NSXl5S1E&single=true&gid=3&output=html&widget=true'></iframe>


<p>The plant still sees an increase of about 60% after purchasing power from third party suppliers.</p>

<h2>What do we do?</h2>

<p>Its clear that there are no simple ways of reducing or even maintaining energy costs at the &ldquo;pre-hike&rdquo; levels in Chennai. Simply changing the energy source to Diesel is not an option either, and buying third-party power can be just as expensive as using energy from the TNEB grid. What this calls for is more aggressive and hands-on management of energy consumption in the manufacturing facility, looking at which machines and systems consume the most energy, and finding ways to decrease their usage. Our vimana platform does just this and we will be back with a followup post on how <a href="http://www.systeminsights.com/vimana">vimana</a> can be applied in improving energy efficiency and reducing energy costs in a manufacturing facility.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring MTConnect Streams: MTConnect Graphr]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2012/07/02/monitoring-mtc-streams-mtconnect-graphr/"/>
    <updated>2012-07-02T11:15:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2012/07/02/monitoring-mtc-streams-mtconnect-graphr</id>
    <content type="html"><![CDATA[<p>A few months back I took up the fun task of exploring MTConnect streams and the amazing possibilities which it presented to a developer. That culminated into a web base monitoring app, MTConnect Graphr, which can now be downloaded from <a href="http://github.com/princearora/mtconnect-graphr">Github</a>. In this post I&rsquo;ll run down through the development process of the same.</p>

<p>The web scene has changed remarkably in a past few years. Web applications are expected to be compatible to smartphones and tablets. They are supposed to be clean and responsive. This requirement was enough to persuade me to use <a href="http://twitter.github.com/bootstrap/">Bootstrap by Twitter</a> as the basic framework for the app. It is tiny, expandable and has good documentation to get you started.</p>

<p>Coming to the implementation, the first task was to dynamically connect to the XML stream provided by the MTConnect Agent. Though it sounds pretty easy, the task becomes a bit tricky because it requires a recurring connection with external urls. The easiest way out of this situation is to implement a PHP proxy. For this we write a PHP loader script, and then use it every time we need to connect to an external host.</p>

<pre><code>header('Content-type: application/xml'); //specififying the return content type
$q = $_GET['url'];
  handle = fopen($q, "r");              //connecting to the url
if ($handle) {                          
    while (!feof($handle)) {
        $buffer = fgets($handle, 4096);
        echo $buffer;                  //reading and returning content
    }
    fclose($handle);
}
</code></pre>

<p>That sums up our <code>loader.php</code>. Next all we need to do is to write a simple function to load the XML file via the proxy.</p>

<pre><code>function getCurrentXML(conn_url) {              //function to retrieve a xml file 
    var n = "";
    return $.ajax({
        url: "loader.php?url=http://"+conn_url, //using the proxy
        cache: !1,
        async: !1,
        dataType: "txt",
        success: function (t) {
            n = t
        }
    }), n
}
</code></pre>

<p>Once we have access to the XML stream, there are a plethora of tools available to parse and get data out of it. I chose to use a combination of jQuery and JSON for the job. The xml2json plugin available <a href="http://www.fyneworks.com/jquery/xml-to-json/">here</a> provided an easy conversion to JSON.</p>

<pre><code>var xmldata = getCurrentXML(conn_url),
    i = $.xml2json(xmldata);
</code></pre>

<p>With JSON, life is easy. It can&rsquo;t be any simpler to parse data than it is with JSON. All I did was to write regular funtions to parse conditions and device parameters. But there is a catch. Not all XML tags will be meaningful and to make them appear right, we need to write individual functions for each of them. Here I will explain the working of the function used to parse the conditions for all parameters.</p>

<pre><code>this.getCondition = function (n) {
  var r=new Object();
  r.type= new Array(),r.value=new Array();
  var count=0;
  for (var t = 0; t &lt; n.ComponentStream.length; t++) {
    var i = n.ComponentStream[t],
        u = i.name;
    if (i.Condition)
    {
      var v = i.Condition;
      if(v.Normal){ if(v.Normal.length&gt;1){
        for(var f =0; f &lt; v.Normal.length; f++)
        {
          r.type[count] =  u+' '+v.Normal[f].type;
          r.value[count++] = "Normal"
        }}
      else{
          r.type[count] =  u+' '+v.Normal.type;
          r.value[count++] = "Normal"}
        }
      ..........
      //similarly for other conditions 
     }r.len=count;
   }
       return r 
},
</code></pre>

<p>Though this takes away the reusability of the script, the data displayed turns out to be easier to comprehend.</p>

<p>With all these pieces in place, a simple requirement is to refresh the input from the MTC stream every few milliseconds. A recursive function with delay takes care of that</p>

<pre><code>var updateFromMTC = function(){
.....
  setTimeout('updateFromMTC("'+conn_url+'")' , 1000);
.....
}
</code></pre>

<p>The task we confront next is to display it elegantly. That is taken care by using power of HTML5. The devices in the stream are populated at the top of the page with the color of each dependent on the availability of the device. To display all the parameters we use two empty divs, in which the parameters and the conditions are populated using a javascript user function.</p>

<pre><code>&lt;div class="container" id='SelStats' position='absolute'"&gt;
  &lt;div id='conditions' position='absolute'&gt;&lt;/div&gt;
&lt;/div&gt;

var updateSelected = function(){
 if(thePage.ActiveShape){
   var selShp = thePage.ActiveShape;
    var SelDisplay = document.getElementById('SelStats');
    if(SelDisplay &amp;&amp; selShp){
     if(selShp.deviceName != ''){
        $(SelDisplay).empty();
        $(SelDisplay).append('&lt;b&gt;Machine:&lt;/b&gt;' + selShp.text);
        ......
</code></pre>

<p>So, this completes the basic task of monitoring an MTConnect stream. Next we need to plot it. There are some really advanced open source scripts out there to assist plotting data, but for this particular task <a href="http://smoothiecharts.org/">Smoothie Charts</a> seemed a perfect fit to me. It is a really small charting library designed for live streaming data. Integration with the existing code was easy. A few more lines to the code, and it plots like a charm.</p>

<pre><code>var smoothie = new SmoothieChart();
  smoothie.streamTo(document.getElementById("mycanvas") 3000 /*delay*/);
var line1 = new TimeSeries();
  setInterval(function() {line1.append(new Date().getTime(), math.random());}, 3000 /*delay*/);
</code></pre>

<p>Finally, we need to add an emergency alarm light for the parameter being monitored. A slick form to enter the maximum/minimum value, and a basic function to compare instantaneous values are enough to pull it off. With the div being populated dynamically every few seconds, we need to save some info in a cookie which is made easy by the <a href="https://github.com/carhartl/jquery-cookie/">jQuery-cookie</a> plugin.</p>

<div style="text-align: center;">
<img src="http://www.manufacturingbigdata.com/images/graphr-1.jpg" width=360 height=600 /> <img src="http://www.manufacturingbigdata.com/images/graphr-2.jpg" width=360 height=600 /> </div>


<p>I guess that&rsquo;s it. The app is ready to roll. I checked it out locally on a PC, iPOD touch and an android device. Seems to be working fine for me. Let me know if any of you notice anything off about it.</p>

<p>PS: Please ensure that the application is run on a PHP server. Otherwise the application will fail to connect to the stream and all you will see is a white blank page. I&rsquo;d recommend WAMP/LAMP for users trying it on their personal PCs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress + S3 + Cloudfront]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2012/06/13/s3/"/>
    <updated>2012-06-13T07:03:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2012/06/13/s3</id>
    <content type="html"><![CDATA[<p>We have finally migrated to Octopress from Google Blogger. Feels a lot better to write in Markdown than using Blogger&rsquo;s editor! The static content is being stored in an S3 bucket and served through AWS Cloudfront.</p>

<p>Thank you: <a href="http://www.jerome-bernard.com/blog/2011/08/20/quick-tip-for-easily-deploying-octopress-blog-on-amazon-cloudfront/">Jerome Bernard</a>, <a href="http://blog.jacobelder.com/2012/03/octopress-and-cloudfront/">Jacob Elder</a>, <a href="http://www.octopress.org">Octopress</a>, and <a href="http://www.github.com">Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why SaaS?]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2012/06/08/why-saas/"/>
    <updated>2012-06-08T11:16:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2012/06/08/why-saas</id>
    <content type="html"><![CDATA[<p>A common question that we always get is why vimana is a software-as-a-service (SaaS) product. Surely, given how much data we are collecting, it must be easier to run it locally inside a plant, right? Well, if all vimana was doing was creating plots of part counts and utilization, then yes, running it locally does make sense. But vimana does a lot more &mdash; it helps understand the patterns behind productivity (and the lack thereof), and being able to support these capabilities requires a whole lot more of computational resources.</p>

<p>So lets dig deeper &mdash; why SaaS?</p>

<ol>
<li><strong>Keep it Growing</strong>: SaaS allows us to scale product functionality as your operations grow. This means that vimana can scale to support an increasing number of devices, along with the analytical capabilities required to support them. SaaS also allows us to keep the app at the latest version without requiring long downtimes for the updates.</li>
<li><strong>Keep it All</strong>: SaaS allows us to keep historical plant data securely for as long as you want us to. This makes it possible to baseline against historical data to put current performance in context, and to make better decisions about the future based on past usage and operational patterns.</li>
<li><strong>Keep it Lean</strong>: SaaS enables simple, annual, pay-as-you-go pricing, where you pay based on the number of devices you have connected to vimana, and the kind of analysis being performed on the devices. Since the app is delivered over the web, any number of users can access it (even simultaneously!).</li>
</ol>


<p>SaaS deployments also allow us to farm out specific analytical processes to elastic clusters, using map reduce and other big-data-crunching technologies. We will be talking about this in detail in upcoming posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BEC Article in Livebetter Magazine]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2012/06/08/livebetter-article/"/>
    <updated>2012-06-08T08:23:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2012/06/08/livebetter-article</id>
    <content type="html"><![CDATA[<p>The June issue of the <a href="http://livebettermagazine.com">Livebetter Magazine</a> features an article about the BEC standard by Ralph Resnick from the National Center for Defense Manufacturing and Machining and myself. You can read the article <a href="http://livebettermagazine.com/eng/magazine/article_detail.lasso?id=307">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Powered by Octopress]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2012/05/30/powered-by-octopress/"/>
    <updated>2012-05-30T10:00:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2012/05/30/powered-by-octopress</id>
    <content type="html"><![CDATA[<p>We are moving to the Octopress framework. The blog will be hosted on Github Pages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB and Replica Sets]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2012/05/08/mongo-replica-sets/"/>
    <updated>2012-05-08T10:50:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2012/05/08/mongo-replica-sets</id>
    <content type="html"><![CDATA[<h2>Why do we care</h2>

<p>We use mongoDB to persist data from the vimana tenants. All historical data from our customers is stored in mongo, and its very important that we can continuously persist into mongo without losing data. We are using replica sets to make sure that our data is redundantly stored and to ensure that we have a failover mechanism when one of the mongoDBs lose connection.</p>

<h2>Introduction to Replica Sets</h2>

<p>Replica sets are a form of asynchronous master/slave replication, adding automatic failover and automatic recovery of member nodes. A replica set consists of two or more nodes that are copies of each other. (i.e.: replicas). The replica set automatically elects a primary (master). Drivers (and mongos) can automatically detect when a replica set primary changes and will begin sending writes to the new primary.</p>

<h2>Those GOTCHAs</h2>

<p>In order enable replica sets, you need to pass the &ldquo;replSet&rdquo; parameter while starting the mongod processes.
Replica sets cannot be initiated on those mongod instance which were already started with out &ldquo;replSet&rdquo; parameter.  Stop and restart the mongod processes with replSet parameter.
When replica sets are configured, all the writes will only go to the primary!!! Mongo has its own algorithms for syncing the data across the nodes.</p>

<h2>That setup</h2>

<p>Starting multiple mongo instances.</p>

<pre><code>$ mongod --dbpath mongo_rpl/data1 --replSet set1 --port 27018
$ mongod --dbpath mongo_rpl/data2 --replSet set1 --port 27019
$ mongod --dbpath mongo_rpl/data3 --replSet set1 --port 27020
</code></pre>

<p>This starts 3 different instances of mongo running on different ports.</p>

<h2>Setting up the replica config</h2>

<pre><code>➜  ~  mongo localhost:27018
MongoDB shell version: 1.8.2
Mon Apr 30 11:13:59 *** warning: spider monkey build without utf8 support.  consider rebuilding with utf8 support
connecting to: localhost:27018/test
&gt; config = {_id: "set1", members: [{_id: 0, host: "localhost:27018"}, {_id: 1, host: "localhost:27019"},{_id: 2, host:"localhost:27020"}]}
{
   "_id" : "set1",
  "members" : [
 {
    "_id" : 0, 
   "host" : "localhost:27018"
},
{
   "_id" : 1,
  "host" : "localhost:27019"
},
{
   "_id" : 2,
  "host" : "localhost:27020"
}
]
}
&gt; rs.initiate(config)
{
   "info" : "Config now saved locally.  Should come online in about a minute.",
  "ok" : 1
}
&gt;
</code></pre>

<p>This config enables the replicas to talk with each other. The talking would involve the replicas communicating who is the primary and who are all the secondaries.</p>

<h2>That app</h2>

<p>We wrote a <a href="https://github.com/deepakprasanna/mongo_oplog_watcher">small app</a> which would tail the oplog of our test servers and insert some interesting records into the replicas.</p>

<h2>Those observations</h2>

<p>The most interesting part of playing with replica sets is to understand how mongoDB behaves and handles a node failure.
I have classified my observations into two catagories, a node failure during a read and during a write.</p>

<h3>Reading Scenarios</h3>

<p>MongoDB doesnot by default support serving reads from the replicas. MongoDB will serve all reads from primary by default. Reads from secondaries can be configured, which is actually a 2 step process.  The first step is to configure &ldquo;slaveOK&rdquo; in the mongo console. This will tell mongo, it is okay to serve the reads from the secondaries. The second step is to instantiate the MongoReplConnection with :read => :secondary option.
This will tell the driver that it is okay to send the reads to the secondaries. Mongo driver will randomly select one of the secondaries to serve the reads. The distribution of the reads across the secondaries is handled by the driver.</p>

<ul>
<li><p><strong>Secondary goes down:</strong> <br/>
<strong>slaveOk:</strong> <code>Mongo::ConnectionFailure</code> will be raised when there is a failure. Mongo driver is intelligent, when it sees a <code>Mongo::ConnectionFailure</code> it prevents the next reads from going to that dead secondary.
The driver has its own algorithm to find out if the dead secondary is back alive or not. As far a read is concerned we need to catch <code>Mongo::ConnectionFailure</code> and make the read once more(Assuming that another secondary will be up).
If the secondaries are configured to serve the reads, then the primary is not touched at all until all other secondaries are dead. But there is no real way to find out which mongod instance served the read. <br/>
<strong>Without SlaveOk:</strong>  Rest of the world goes as usual.</p></li>
<li><p><strong>Primary goes down:</strong>  <br/>
<strong>slaveOk:</strong> Rest of the world goes as usual. <br/>
<strong>without SlaveOk:</strong> All the reads are going to fail since primary can only serve the reads. There are 2 ways to solve this problem, catch the exception and throw an error message. Or keep polling the server until one of the other secondaries becomes a primary and read becomes successful. If the client decides to retry, it&rsquo;s not guaranteed that another member of the replica set will have been promoted to primary right away, so it&rsquo;s still possible that the driver will raise another <code>Mongo::ConnectionFailure</code>.</p></li>
</ul>


<h3>Writing scenarios</h3>

<ul>
<li><strong>Secondary goes down:</strong> When replica sets are configured in mongoDB, all the writes go to the primary. So there is no problem at all if a secondary goes down.
If the secondary comes up again, mongo will take care of replicating the records which were lost by the time when it was down. Perfect!</li>
<li><strong>Primary goes down:</strong> The ruby mongo driver raises <code>Mongo::ConnectionFailure</code>. Checkout the oplog watcher, we have caught this exception and we are doing a <code>puts</code> that the connection is lost.
  But how ever the after a few seconds, when one of the other secondaries get elected as the primary the writes become successful. The interesting fact is that all the writes which failed
  during this recovery process is lost. Since we are able to catch <code>Mongo::ConnectionFailure</code>, it is up-to the client to pull the sleeves and persist the data somewhere else until another
  secondary becomes a primary.While testing we lost about 20-30 records when the primary was down. I guess this number would be more or less depending the latency which we would face in the realtime.</li>
<li><strong>Last mongod instance is not becoming primary:</strong> As you can see from the config above, we have 3 replicas. So we would have one primary(27018) and two secondaries(27019 and 27020). We are stopping the primary(27018). Now one of the secondaries becomes a primary(say 28019). Now we would have one primary(27019) and one secondary(27020). Again we are stopping the primary(27019). But the left over secondary(27020) will not become the primary!!!!!!! This causes all the writes to fail. But if we bring another dead mongod instance(27018) up, the leftover secondary(27020) becomes the primary and from then on the writes become successful.  This was found while digging into the mongo logs.</li>
</ul>


<p><code>[rs Manager] replSet can't see a majority, will not try to elect self:</code></p>

<p>From what I understand , Replica sets will do the election process only if there are 2 or more replicas available. If at all we have only one replica alive, the election will not happen and all the writes will fail because there will be no primary. We need have 2 replicas alive at anytime for the writes to become successful. This is interesting.</p>

<p>Happy hacking, <br/>
Deepak.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome Deepak!]]></title>
    <link href="http://www.manufacturingbigdata.com/blog/2012/04/14/welcome-deepak/"/>
    <updated>2012-04-14T10:48:00+05:30</updated>
    <id>http://www.manufacturingbigdata.com/blog/2012/04/14/welcome-deepak</id>
    <content type="html"><![CDATA[<p>We would like to welcome Deepak Prasanna to System Insights. Deepak starts this month as a Software Developer working from our Chennai office. You will be hearing from him soon in this blog.</p>
]]></content>
  </entry>
  
</feed>
